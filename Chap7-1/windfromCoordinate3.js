var gridData = [
    7.604,
    -4.39,
    6.792,
    -5.5,
    6.974,
    -5.449,
    4.617,
    -5.91,
    4.383,
    -7.294,
    1.409,
    -4.609,
    -1.795,
    -0.653,
    0.477,
    -1.911,
    0.168,
    -2.404,
    -0.482,
    -1.682,
    -1.583,
    -0.672,
    -2.366,
    1.258,
    -1.175,
    2.52,
    -0.397,
    2.822,
    0.135,
    2.576,
    0.957,
    2.255,
    0.181,
    2.594,
    -0.205,
    2.341,
    0.389,
    1.829,
    1.038,
    -0.259,
    0.656,
    0.069,
    1.2,
    -1.997,
    0.024,
    -1.39,
    -0.43,
    -1.248,
    -1.358,
    -1.562,
    -0.49,
    -2.124,
    -0.745,
    -1.528,
    -0.324,
    -0.999,
    -0.363,
    0.996,
    -0.023,
    0.439,
    -0.541,
    -1.16,
    -1.177,
    -1.023,
    -1.245,
    0.109,
    -0.554,
    0.709,
    3.464,
    2,
    -0.235,
    2.69,
    -0.475,
    1.38,
    -0.621,
    1.332,
    0.536,
    0.686,
    0.769,
    1.098,
    0.536,
    1.051,
    -0.532,
    1.855,
    -3.137,
    3.364,
    -2.219,
    4.758,
    -2.069,
    4.242,
    -3.092,
    4.415,
    -2.615,
    4.918,
    6.96,
    -4.182,
    6.404,
    -5.186,
    8.03,
    -6.274,
    6.082,
    -5.104,
    3.464,
    -5.334,
    3.547,
    -2.976,
    -1.099,
    0.038,
    -0.926,
    -1.671,
    -0.645,
    -1.163,
    -1.826,
    0.128,
    -1.731,
    1.04,
    -1.325,
    1.965,
    -0.612,
    2.134,
    0.718,
    1.973,
    0.98,
    2.202,
    1.013,
    2.275,
    1.623,
    2.318,
    1.038,
    2.568,
    0.882,
    1.359,
    1.768,
    -0.093,
    0.766,
    -2.359,
    0.835,
    -2.175,
    0.365,
    -2.068,
    -0.772,
    -1.515,
    -1.247,
    -0.779,
    0.484,
    0.519,
    -1.77,
    0.186,
    0.207,
    0.388,
    -0.119,
    -1.706,
    -0.589,
    -0.512,
    0.187,
    -0.962,
    -0.638,
    0.171,
    -0.458,
    0.475,
    3.464,
    2,
    3.464,
    2,
    3.464,
    2,
    3.464,
    2,
    -0.076,
    -0.163,
    0.133,
    0.534,
    -0.581,
    -1.597,
    -0.153,
    -2.195,
    -2.428,
    2.038,
    -2.821,
    4.344,
    -2.416,
    3.867,
    -1.351,
    4.418,
    -1.582,
    3.728,
    -2.425,
    4.2,
    7.856,
    -3.498,
    7.253,
    -3.538,
    6.507,
    -3.034,
    6.344,
    -3.232,
    3.674,
    -4.226,
    1.987,
    -1.012,
    1.615,
    -0.285,
    -0.821,
    -0.437,
    -1.412,
    0.148,
    -0.975,
    0.683,
    -1.391,
    1.6,
    -0.859,
    1.762,
    -0.439,
    2.064,
    1.193,
    2.152,
    1.952,
    2.021,
    1.847,
    2.051,
    1.643,
    2.028,
    1.613,
    1.452,
    1.5,
    0.637,
    1.108,
    -1.418,
    0,
    -1.96,
    -1.067,
    -2.513,
    -0.765,
    -1.325,
    -1.541,
    0.531,
    -1.304,
    -0.349,
    -0.292,
    -1.267,
    0.13,
    -1.233,
    -0.108,
    -0.144,
    -1.343,
    -0.462,
    -0.521,
    -0.254,
    -0.291,
    -0.547,
    -0.112,
    -0.913,
    -0.699,
    0.174,
    3.464,
    2,
    3.464,
    2,
    3.464,
    2,
    -1.118,
    0.843,
    -0.811,
    -1.202,
    -0.823,
    -0.981,
    -0.985,
    0.418,
    -3.262,
    0.228,
    -3.58,
    2.507,
    -3.124,
    3.723,
    -3.198,
    4.401,
    -1.778,
    4.631,
    -1.427,
    4.667,
    -1.533,
    4.453,
    8.02,
    -0.985,
    5.262,
    -1.023,
    6.561,
    -0.806,
    1.468,
    -2.443,
    0.411,
    -2.921,
    2.202,
    -2.28,
    1.69,
    -1.69,
    -0.502,
    -1.874,
    -0.324,
    -1.207,
    -0.958,
    1.801,
    -1.017,
    1.35,
    0.132,
    1.885,
    0.593,
    2.067,
    0.167,
    2.384,
    1.117,
    3.243,
    1.462,
    1.941,
    0.745,
    1.942,
    1.016,
    1.3,
    1.743,
    0.245,
    0.783,
    -0.73,
    -0.196,
    -1.598,
    0.085,
    -1.618,
    0.207,
    -0.637,
    -0.312,
    -0.159,
    -0.573,
    -0.573,
    0.858,
    -1.181,
    -0.52,
    0,
    -0.549,
    -1.033,
    -0.942,
    -0.791,
    -0.397,
    -0.852,
    -0.527,
    -0.397,
    -0.918,
    0.064,
    -1.25,
    0.455,
    -3.061,
    8.41,
    -0.599,
    8.559,
    -1.177,
    3.233,
    -5.29,
    -0.463,
    -5.067,
    1.17,
    -4.523,
    1.383,
    -5.219,
    -0.733,
    -4.93,
    1.138,
    -3.964,
    1.933,
    -2.769,
    3.185,
    -2.475,
    2.949,
    -1.701,
    4.209,
    -0.859,
    4.417,
    -0.593,
    4.219,
    4.78,
    0.757,
    4.57,
    0.806,
    3.514,
    -1.42,
    0.656,
    -1.546,
    0.025,
    -1.44,
    1.131,
    0.68,
    1.891,
    -1.478,
    1.513,
    -0.839,
    -1.134,
    -0.855,
    1.198,
    0.168,
    -0.797,
    -2.454,
    -0.826,
    -1.18,
    -0.921,
    3.012,
    -0.211,
    1.717,
    -1.362,
    2.179,
    -0.116,
    3.318,
    -2,
    0,
    -2,
    0,
    -2,
    0,
    0.21,
    -0.844,
    -0.25,
    -1.418,
    -0.174,
    -1.992,
    -0.249,
    -1.773,
    -0.272,
    -0.889,
    0.13,
    -1.865,
    0.882,
    -2.424,
    1.12,
    -3.253,
    1.057,
    -2.266,
    0.228,
    -0.102,
    -1.053,
    -0.982,
    -1.024,
    -0.478,
    -2.049,
    1.231,
    -3.028,
    3.608,
    -2.585,
    7.507,
    -1.119,
    7.062,
    0.183,
    5.227,
    -0.572,
    2.69,
    -3.738,
    1.214,
    -4.066,
    1.014,
    -4.947,
    -0.173,
    -3.799,
    0.399,
    -2.723,
    2.052,
    -1.915,
    2.451,
    -1.183,
    2.538,
    -0.228,
    3.262,
    -0.121,
    3.478,
    1.012,
    3.777,
    3.404,
    -1.172,
    1.717,
    -0.211,
    1.823,
    -0.664,
    -0.887,
    -1.601,
    0.521,
    -1.817,
    -0.223,
    -1.816,
    0.326,
    -1.413,
    1.732,
    -1.559,
    -0.452,
    -0.088,
    -1.009,
    -2.266,
    -0.737,
    -1.329,
    -1.119,
    -0.342,
    -0.359,
    0.737,
    -0.252,
    0.097,
    -2.139,
    2.46,
    -1.57,
    2.719,
    -2,
    0,
    -2,
    0,
    -2,
    0,
    -0.688,
    -0.983,
    -0.492,
    -1.105,
    -0.168,
    -0.792,
    0.85,
    -0.326,
    -0.206,
    -0.245,
    -1.049,
    0.037,
    -1.56,
    -0.937,
    -0.879,
    -0.593,
    0.851,
    -0.181,
    1.147,
    -0.803,
    -1.089,
    -0.057,
    -3.424,
    0.728,
    -5.209,
    0.732,
    -4.749,
    2.968,
    -2.838,
    4.723,
    -0.74,
    4.672,
    0.761,
    4.313,
    1.543,
    3.636,
    1.629,
    3.064,
    0.571,
    2.935,
    -0.785,
    1.36,
    -2.381,
    0.914,
    -1.675,
    1.456,
    -0.344,
    1.491,
    0.79,
    1.695,
    1.689,
    2.504,
    2.798,
    2.702,
    3.67,
    2.57,
    1.715,
    -0.396,
    0.48,
    -1.078,
    -0.334,
    -0.749,
    0.237,
    -1.217,
    -0.331,
    -1.236,
    0.485,
    0.068,
    -0.326,
    -0.946,
    0.576,
    -1.674,
    0.499,
    -2.163,
    -0.351,
    -1.407,
    -0.67,
    -1.746,
    -0.973,
    -0.632,
    -1.917,
    0.698,
    -1.849,
    1.607,
    -2.081,
    1.404,
    -1.879,
    1.22,
    -0.567,
    0.459,
    0.739,
    -0.946,
    0.305,
    -1.571,
    -0.328,
    -1.008,
    -0.119,
    -0.751,
    0.409,
    -0.802,
    -0.303,
    0.175,
    0.585,
    0.366,
    -0.728,
    -0.966,
    0.764,
    -0.764,
    -0.33,
    -0.859,
    0.233,
    -0.869,
    -0.119,
    -0.973,
    -0.36,
    -0.429,
    0.482,
    4.585,
    -2.105,
    -0.85,
    -4.474,
    0.709,
    -2.626,
    2.536,
    -0.649,
    3.052,
    1.297,
    2.914,
    1.876,
    2.679,
    2.503,
    2.684,
    2.935,
    2.643,
    2.526,
    2.906,
    1.828,
    2.516,
    0.965,
    2.274,
    1.009,
    2.266,
    1.699,
    2.098,
    2.451,
    1.915,
    2.924,
    2.048,
    3.432,
    2.315,
    -0.545,
    0.167,
    -2.68,
    0,
    -2.68,
    0,
    0,
    1,
    0,
    1,
    0.495,
    -1.437,
    -0.216,
    -1.363,
    0.562,
    -1.961,
    0.726,
    -1.426,
    0.916,
    -0.572,
    -1.159,
    -0.04,
    -1.853,
    0.944,
    -2.69,
    3.094,
    -2.256,
    1.465,
    -2.283,
    0.969,
    -0.512,
    0.228,
    -1.506,
    -0.767,
    0.585,
    -0.697,
    0.612,
    -0.273,
    0.453,
    -0.408,
    -1.13,
    0.792,
    0.709,
    0.301,
    0.638,
    -1.369,
    -0.27,
    -0.785,
    -0.523,
    -0.67,
    -0.165,
    -1.34,
    0.1,
    -0.955,
    -0.509,
    -1.326,
    -1.482,
    0.156,
    -3.862,
    2.23,
    -0.481,
    1.797,
    0.64,
    -0.618,
    0.165,
    -0.408,
    0.064,
    0.21,
    -0.485,
    1.587,
    -0.329,
    2.68,
    1.644,
    2.965,
    2.185,
    2.899,
    2.598,
    2.786,
    3.302,
    2.77,
    3.167,
    2.953,
    3.295,
    2.668,
    3.194,
    2.587,
    3.234,
    2.437,
    3.26,
    2.369,
    3.301,
    2.312,
    3.334,
    2.334,
    3.218,
    0.112,
    -0.244,
    -0.98,
    -0.927,
    -0.472,
    0,
    1,
    0,
    1,
    1.584,
    1.584,
    1.584,
    1.584,
    -0.95,
    1.055,
    -0.855,
    -0.436,
    -0.745,
    -1.528,
    -2.581,
    1.875,
    -3.509,
    3.051,
    -2.73,
    -0.887,
    -1.85,
    -0.785,
    -0.359,
    -0.704,
    -1.404,
    -1.615,
    -0.598,
    -0.738,
    -0.466,
    0.378,
    0.968,
    -0.431,
    1.152,
    1.037,
    -0.525,
    -0.074,
    -0.045,
    0.367,
    -0.186,
    0.167,
    -0.549,
    -1.233,
    -1.405,
    -0.655,
    -0.711,
    -1.016,
    -1.56,
    -0.537,
    -3.746,
    3.033,
    -1.854,
    2.46,
    -1.528,
    0.438,
    -0.933,
    -1.238,
    -0.918,
    -1.057,
    -0.896,
    -0.344,
    -0.386,
    0.348,
    0.229,
    0.994,
    0.667,
    1.65,
    0.83,
    2.716,
    1.648,
    3.234,
    1.998,
    3.197,
    2.339,
    3.22,
    2.966,
    3.072,
    3.23,
    3.119,
    3.74,
    2.337,
    3.839,
    1.629,
    3.765,
    1.598,
    3.3,
    1.983,
    3.399,
    2.38,
    -0.538,
    -2.009,
    -0.027,
    -1.56,
    0.508,
    -2.038,
    0.589,
    -1.711,
    -0.341,
    -2.153,
    -2.954,
    -0.521,
    1.584,
    1.584,
    -0.82,
    -0.688,
    -1.496,
    -0.105,
    -1.498,
    0.865,
    -3.016,
    0.158,
    0.312,
    -2.218,
    0.312,
    -2.218,
    -3,
    0,
    -2.019,
    -0.356,
    -2.789,
    1.421,
    -2.482,
    2.482,
    -1.416,
    1.749,
    -1.958,
    -0.452,
    -2.32,
    0.04,
    -1.967,
    0.677,
    -1.393,
    0.939,
    -0.194,
    -0.188,
    -0.624,
    0.144,
    -1.51,
    0.026,
    -0.846,
    1.165,
    -0.903,
    2.955,
    -3.154,
    3.154,
    -3.598,
    -0.126,
    -3.095,
    -2.01,
    -2.252,
    -2.174,
    -1.71,
    -2.038,
    -1.588,
    -0.578,
    -0.998,
    0.648,
    -0.514,
    1.494,
    -0.396,
    2.245,
    -0.152,
    2.906,
    0.537,
    3.388,
    0.901,
    3.361,
    1.149,
    3.157,
    1.765,
    3.184,
    2.509,
    2.787,
    2.838,
    2.467,
    2.942,
    2.468,
    2.985,
    2.169,
    2.883,
    2.019,
    2.663,
    2.081,
    -0.314,
    -1.477,
    0.627,
    -1.285,
    0.876,
    -0.614,
    0.901,
    0.127,
    -2.954,
    -0.521,
    -2.954,
    -0.521,
    -2.954,
    -0.521,
    -0.3,
    0.923,
    -2.356,
    1.841,
    -3.05,
    0.053,
    -3.26,
    0,
    0.312,
    -2.218,
    0.312,
    -2.218,
    -3,
    0,
    -3,
    0,
    -4.238,
    0.596,
    -1.615,
    -0.463,
    -2.227,
    -0.811,
    -1.899,
    -0.066,
    -1.717,
    -0.765,
    -0.744,
    0.091,
    -1.144,
    -1.03,
    -0.271,
    0.359,
    -0.697,
    -0.585,
    -0.538,
    0.047,
    -0.93,
    1.994,
    -0.078,
    2.229,
    0.849,
    -0.044,
    0.169,
    -1.933,
    -1.867,
    -4.193,
    -2.357,
    -3.244,
    -2.476,
    -1.866,
    -1.96,
    -0.599,
    -1.901,
    0.335,
    -1.898,
    1.009,
    -1.678,
    1.799,
    -1.484,
    2.375,
    -0.766,
    2.859,
    -0.257,
    2.939,
    0.056,
    3.2,
    0.638,
    3.003,
    0.953,
    3.118,
    1.473,
    3.02,
    1.585,
    2.86,
    1.382,
    2.964,
    1.297,
    2.782,
    1.488,
    2.685,
    0.347,
    -0.743,
    -0.242,
    -0.571,
    -0.235,
    -0.152,
    -0.357,
    0.289,
    0.691,
    0.265,
    -1.873,
    0.757,
    -1.534,
    1.534,
    -0.809,
    1.818,
    -1.77,
    0.186,
    -2.137,
    -0.377,
    -1.004,
    0.873,
    -1.241,
    2.066,
    -3,
    0,
    -3,
    0,
    -3,
    0,
    -1.915,
    -1.496,
    -2.459,
    -1.253,
    -0.332,
    -2.094,
    -0.591,
    -3.733,
    0.469,
    -2.963,
    -0.61,
    -1.057,
    0.055,
    -1.579,
    -1.196,
    -1.077,
    -1.052,
    0.322,
    -0.777,
    0.346,
    -1.335,
    0.26,
    0.076,
    -0.163,
    -1.517,
    0.267,
    -1.517,
    0.267,
    -2.833,
    -4.047,
    -2.82,
    -2.723,
    -2.71,
    -1.264,
    -3.325,
    -0.408,
    -3.23,
    0.512,
    -2.936,
    0.787,
    -2.711,
    1.503,
    -2.443,
    2.278,
    -2.019,
    2.883,
    -1.779,
    3.21,
    -1.197,
    3.289,
    -1.039,
    3.624,
    -0.39,
    3.71,
    -0.269,
    3.851,
    -0.131,
    3.738,
    0,
    3.58,
    0,
    3.49,
    0.322,
    3.686,
    -0.332,
    -0.782,
    -0.57,
    -0.01,
    -1.475,
    0.368,
    -0.048,
    1.379,
    0.053,
    1.509,
    -0.334,
    1.027,
    -1.346,
    1.853,
    0.108,
    1.546,
    -0.218,
    0.873,
    1.458,
    1.021,
    1.102,
    1.834,
    1.545,
    0.329,
    -0.23,
    -1.452,
    0.561,
    -1.541,
    0.281,
    -2.675,
    -0.056,
    -3.21,
    -1.554,
    -2.923,
    -1.064,
    -2.633,
    -2.617,
    -3.349,
    -3.291,
    -3.922,
    -2.677,
    -1.192,
    -1.517,
    -1.023,
    -0.73,
    -1.264,
    -3.383,
    -1.231,
    -3.383,
    -1.231,
    -0.844,
    -0.21,
    -1.517,
    0.267,
    -1.517,
    0.267,
    -1.517,
    0.267,
    -3.294,
    -4.883,
    -3.3,
    -2.971,
    -3.644,
    -1.857,
    -3.7,
    -1.202,
    -4.05,
    0,
    -3.92,
    0.977,
    -3.424,
    1.454,
    -3.208,
    2.164,
    -3.248,
    2.725,
    -2.905,
    3.116,
    -2.574,
    3.543,
    -2.011,
    3.947,
    -1.912,
    4.294,
    -1.681,
    4.378,
    -1.57,
    4.089,
    -1.455,
    3.79,
    -1.187,
    3.883,
    -0.523,
    4.258,
    0.164,
    -0.536,
    -2.005,
    0.14,
    -0.938,
    1.923,
    -0.871,
    2.269,
    0.16,
    1.833,
    0.68,
    1.131,
    0.381,
    1.106,
    0.874,
    0.635,
    1.025,
    -0.5,
    1.474,
    -0.719,
    1.934,
    -0.376,
    0,
    -1.65,
    0.452,
    -1.814,
    0.719,
    -1.474,
    -0.656,
    -2.63,
    0.182,
    -2.604,
    -1.378,
    -2.955,
    -2.07,
    -3.187,
    -3.087,
    -2.683,
    -4.695,
    -1.436,
    -4.117,
    -1.663,
    -4.71,
    -1.351,
    -1.54,
    0,
    -1.54,
    0,
    0.089,
    -0.502,
    0.089,
    -0.502,
    -0.132,
    -0.07,
    -1.517,
    0.267,
    -1.517,
    0.267,
    -2.515,
    -4.936,
    -2.955,
    -2.755,
    -3.654,
    -1.551,
    -4.537,
    -0.158,
    -4.622,
    0.404,
    -4.677,
    1.08,
    -4.64,
    1.781,
    -4.233,
    2.065,
    -4.166,
    2.405,
    -3.831,
    3.103,
    -3.41,
    3.657,
    -2.96,
    4.227,
    -3.014,
    4.469,
    -3.139,
    4.32,
    -1.986,
    2.367,
    -1.986,
    2.367,
    -1.986,
    2.367,
    -2.378,
    2.141,
    -0.702,
    -0.808,
    -1.04,
    1.432,
    -0.902,
    1.627,
    -1.632,
    0.437,
    0.622,
    1.398,
    1.645,
    0.503,
    2.734,
    1.16,
    2.658,
    1.184,
    1.312,
    -1.509,
    -0.114,
    -2.177,
    0.58,
    -1.683,
    -1.324,
    -2.203,
    -0.226,
    -2.148,
    -0.564,
    -2.261,
    -0.736,
    -1.654,
    0.341,
    -3.242,
    -1.06,
    -3.262,
    -2.623,
    -2.913,
    -2.765,
    -1.728,
    -1.877,
    -1.128,
    -3.22,
    -2.091,
    -2.686,
    -1.951,
    -1.324,
    1.578,
    -1.54,
    0,
    0.089,
    -0.502,
    -1.54,
    0,
    -1.54,
    0,
    -1.151,
    -1.371,
    -1.419,
    -0.174,
    -0.357,
    -1.167,
    -2.964,
    -1.258,
    -4.119,
    -0.506,
    -4.743,
    0.249,
    -5.304,
    0.84,
    -5.458,
    1.16,
    -5.431,
    1.557,
    -5.396,
    2.18,
    -4.697,
    2.498,
    -4.288,
    3.115,
    -4.028,
    3.89,
    -3.955,
    4.392,
    -3.932,
    5.412,
    -4.657,
    5.172,
    -1.986,
    2.367,
    -1.986,
    2.367,
    0.255,
    -0.442,
    0.101,
    0.438,
    -1.023,
    1.097,
    -0.342,
    1.481,
    -0.484,
    2.095,
    -1.135,
    2.549,
    0.274,
    1.556,
    0.544,
    2.183,
    0.723,
    1.36,
    0.979,
    0.034,
    0.496,
    -1.989,
    -0.26,
    -2.476,
    0,
    1,
    0,
    1,
    0,
    1,
    -0.874,
    -1.964,
    -1.094,
    -2.707,
    -0.837,
    -2.43,
    -1.48,
    -2.905,
    -2.253,
    -2.884,
    -1.981,
    -2.279,
    -1.637,
    -1.234,
    -1.737,
    -2.145,
    -2.643,
    -2.218,
    -1.546,
    -0.108,
    -3.043,
    -0.537,
    -1.54,
    0,
    -1.54,
    0,
    -1.54,
    0,
    -5.798,
    -2.11,
    -2.192,
    -0.628,
    -2.58,
    1.43,
    -4.307,
    0.994,
    -4.968,
    0.787,
    -5.699,
    0.903,
    -6.061,
    1.399,
    -6.346,
    1.582,
    -6.168,
    1.886,
    -5.956,
    2.286,
    -5.356,
    2.498,
    -4.587,
    3.333,
    -4.106,
    4.403,
    -3.99,
    5.295,
    -4.717,
    5.426,
    -4.628,
    5.516,
    -4.628,
    5.516,
    0.255,
    -0.442,
    0.255,
    -0.442,
    1.324,
    1.578,
    -0.931,
    1.827,
    -0.324,
    2.64,
    0.042,
    2.38,
    0.637,
    3.279,
    0.892,
    1.678,
    0.674,
    0.894,
    -0.096,
    -0.915,
    0.345,
    -1.624,
    0.657,
    -1.804,
    -0.769,
    -2.368,
    0,
    1,
    0,
    1,
    0,
    1,
    -0.719,
    -1.694,
    -0.877,
    -2.17,
    -1.495,
    -2.589,
    -1.644,
    -2.965,
    -1.441,
    -3.091,
    -1.521,
    -2.434,
    -1.297,
    -1.923,
    -0.987,
    -1.409,
    -1.594,
    -2.363,
    -3.043,
    -0.537,
    -3.043,
    -0.537,
    -3.043,
    -0.537,
    -1.198,
    0.664,
    -5.798,
    -2.11,
    -5.798,
    -2.11,
    -5.798,
    -2.11,
    -3.929,
    2.002,
    -5.928,
    2.516,
    -6.288,
    2.165,
    -6.724,
    2.185,
    -7.01,
    2.143,
    -7.296,
    2.092,
    -6.883,
    1.974,
    -6.686,
    3.86,
    -6.686,
    3.86,
    -5.794,
    3.345,
    0,
    4.12,
    0,
    4.12,
    -3.62,
    6.27,
    -4.628,
    5.516,
    -4.628,
    5.516,
    -3.085,
    5.343,
    1.324,
    1.578,
    1.324,
    1.578,
    0,
    2.34,
    0.44,
    2.775,
    1.044,
    3.414,
    1.381,
    2.831,
    0.617,
    2.018,
    -0.17,
    0.009,
    -1.12,
    -0.43,
    0.069,
    -0.012,
    -1.632,
    -1.369,
    -1.526,
    -0.409,
    -0.281,
    0.63,
    -0.082,
    -0.268,
    -0.516,
    -1.419,
    -0.841,
    -2.932,
    -1.255,
    -3.106,
    -1.386,
    -2.973,
    -1.07,
    -3.5,
    -1.072,
    -3.739,
    -1.035,
    -3.864,
    -0.254,
    -3.631,
    -0.278,
    -2.263,
    -0.531,
    -1.252,
    -2.415,
    -0.879,
    -3.043,
    -0.537,
    -3.043,
    -0.537,
    -2.202,
    0.193,
    -1.639,
    0.835,
    -5.798,
    -2.11,
    -5.125,
    4.3,
    -5.125,
    4.3,
    -7.208,
    3.673,
    -7.559,
    3.525,
    -7.758,
    3.618,
    -8.28,
    3.345,
    -7.994,
    3.559,
    -7.734,
    2.815,
    -7.734,
    2.815,
    -6.686,
    3.86,
    -5.794,
    3.345,
    0,
    4.12,
    0,
    4.12,
    0.273,
    -2.223,
    1.785,
    2.285,
    1.352,
    1.306,
    1.489,
    1.438,
    -3.245,
    1.513,
    -3.245,
    1.513,
    0.556,
    2.407,
    1.009,
    3.518,
    -0.819,
    -0.348,
    -0.819,
    -0.348,
    0.192,
    1.215,
    -1.218,
    -0.171,
    -1.675,
    1.13,
    -1.596,
    0.112,
    -3.305,
    -0.406,
    -1.9,
    1.187,
    -1.358,
    0.339,
    -1.215,
    -1.056,
    -1.479,
    -1.642,
    -1.107,
    -2.375,
    -2.102,
    -2.596,
    -2.904,
    -3.007,
    -2.353,
    -3.765,
    -2.48,
    -4.295,
    -1.657,
    -4.813,
    -1.554,
    -3.49,
    -1.37,
    -2.373,
    -1.532,
    -2.272,
    -2.415,
    -0.879,
    -2.415,
    -0.879,
    -2.415,
    -0.879,
    -2.904,
    -0.305,
    -2.312,
    3.301,
    -5.125,
    4.3,
    -5.125,
    4.3,
    -5.125,
    4.3,
    -8.023,
    4.821,
    -8.618,
    4.582,
    -8.634,
    4.985,
    0,
    2.57,
    0,
    2.57,
    -7.734,
    2.815,
    -7.734,
    2.815,
    -1.936,
    0.705,
    -1.936,
    0.705,
    0,
    4.12,
    -0.358,
    -2.029,
    0,
    4.63,
    -0.381,
    0.257,
    1.8,
    3.118,
    1.409,
    3.872,
    -0.472,
    -0.755,
    -2.57,
    0,
    0.9,
    3.897,
    1.645,
    4.285,
    -0.819,
    -0.348,
    -0.819,
    -0.348,
    -0.819,
    -0.348,
    -2.413,
    0.692,
    -2.096,
    0.562,
    -2.561,
    -0.314,
    -3.48,
    -0.998,
    -2.717,
    -1.043,
    -3.043,
    -0.989,
    -3.191,
    -1.556,
    -2.267,
    -2.041,
    -3.044,
    -1.977,
    -4.08,
    -1.648,
    -4.644,
    -2.574,
    -4.857,
    -3.933,
    -4.979,
    -4.178,
    -4.697,
    -4.536,
    -5.143,
    -2.851,
    -5.184,
    -1.197,
    -4.739,
    -1.359,
    -2.415,
    -0.879,
    -2.415,
    -0.879,
    -5.164,
    2.087,
    -9.272,
    4.128,
    -10.387,
    4.625,
    -11.154,
    4.966,
    -6.287,
    2.288,
    -6.287,
    2.288,
    -6.287,
    2.288,
    -9.819,
    5.003,
    -2.226,
    -1.285,
    0,
    2.57,
    0,
    2.57,
    -4.83,
    -1.758,
    -4.83,
    -1.758,
    -1.936,
    0.705,
    -1.936,
    0.705,
    0,
    5.14,
    -3.304,
    3.937,
    -0.446,
    2.531,
    -0.446,
    2.531,
    1.8,
    3.118,
    1.233,
    0.524,
    -0.21,
    -1.324,
    -2.57,
    0,
    1.734,
    4.764,
    1.608,
    4.671,
    0.626,
    3.951,
    -0.206,
    2.953,
    -1.089,
    1.344,
    -2.368,
    0.769,
    -2.59,
    0,
    -3.109,
    -0.437,
    -3.567,
    -1.091,
    -3.581,
    -1.52,
    -3.789,
    -2.276,
    -4.257,
    -1.634,
    -4.194,
    -1.363,
    -3.74,
    -0.727,
    -5.03,
    -1.538,
    -5.555,
    -2.709,
    -5.544,
    -2.018,
    -6.025,
    -1.281,
    -6.732,
    -2.058,
    -7.605,
    -1.205,
    -7.99,
    -0.559,
    -8.819,
    0.154,
    -10.126,
    0.531,
    -9.26,
    0,
    -11.299,
    2.196,
    -11.717,
    3.139,
    -11.755,
    3.819,
    -10.904,
    4.186,
    -6.287,
    2.288,
    -6.287,
    2.288,
    -3.156,
    2.648,
    -3.156,
    2.648,
    -1.545,
    -2.676,
    -2.226,
    -1.285,
    0,
    4.12,
    1.231,
    3.383,
    1.231,
    3.383,
    0,
    1.03,
    -5.319,
    1.936,
    0,
    5.14,
    0,
    5.14,
    2.226,
    1.285,
    2.226,
    1.285,
    1.233,
    0.524,
    1.233,
    0.524,
    -2.982,
    4.963,
    -8.548,
    4.169,
    2.759,
    4.977,
    1.392,
    4.854,
    1.656,
    4.098,
    -0.195,
    2.783,
    -1.364,
    1.144,
    -2.706,
    0.429,
    -3.1,
    -0.054,
    -4.184,
    -0.366,
    -3.832,
    -0.607,
    -3.451,
    -1.188,
    -4.188,
    -2.043,
    -4.238,
    -1.543,
    -4.889,
    -0.774,
    -3.161,
    -1.681,
    -1.512,
    -2.967,
    -4.907,
    -1.69,
    -5.759,
    -0.101,
    -6.882,
    -0.723,
    -6.94,
    -0.364,
    -7.851,
    -0.549,
    -8.466,
    -1.04,
    -8.65,
    0,
    -9.26,
    0,
    -9.26,
    0,
    -9.26,
    0,
    -11.784,
    3.158,
    -12.084,
    4.398,
    -11.55,
    5.633,
    -11.328,
    6.023,
    -1.285,
    1.835,
    -1.285,
    1.835,
    -3.872,
    1.409,
    -1.545,
    -2.676,
    1.057,
    2.904,
    1.057,
    2.904,
    1.231,
    3.383,
    1.231,
    3.383,
    0,
    1.03,
    0,
    1.03,
    -4.919,
    10.549,
    2.226,
    1.285,
    2.226,
    1.285,
    2.226,
    1.285,
    -4.891,
    7.827,
    -4.171,
    8.945,
    -8.406,
    5.67,
    -9.534,
    6.431,
    2.62,
    5.141,
    1.767,
    4.603,
    2.515,
    4.356,
    0.896,
    2.462,
    -0.648,
    0.926,
    -2.929,
    -0.256,
    -2.606,
    -0.137,
    -3.892,
    -1.19,
    -4.076,
    -1.092,
    -4.211,
    -1.128,
    -4.326,
    -2.3,
    -4.697,
    -3.05,
    -4.728,
    -2.306,
    -4.466,
    -2.683,
    -3.707,
    -1.729,
    -4.172,
    -1.196,
    -3.154,
    -1.607,
    -2.653,
    -0.761,
    -4.224,
    0.37,
    -7.491,
    0.655,
    -7.972,
    1.694,
    -10.283,
    1.081,
    -11.17,
    1.57,
    -9.26,
    0,
    -11.205,
    3.002,
    -11.439,
    3.28,
    -11.631,
    3.335,
    -3.304,
    3.937,
    -3.304,
    3.937,
    2.029,
    0.358,
    2.029,
    0.358,
    -4.115,
    7.127,
    -4.01,
    2.315,
    1.311,
    -0.279,
    1.057,
    2.904,
    1.487,
    0.316,
    -0.787,
    -0.971,
    0,
    1.03,
    0,
    1.03,
    -5.511,
    12.379,
    -1.599,
    8.226,
    -5.015,
    3.779,
    -6.758,
    6.302,
    -5.604,
    8.003,
    -4.068,
    7.983,
    -8.143,
    4.893,
    -8.932,
    5.8,
    2.665,
    4.616,
    2.536,
    4.574,
    3.392,
    4.668,
    1.719,
    1.66,
    -1.35,
    0.024,
    -1.773,
    0.409,
    -2.515,
    -0.353,
    -4.116,
    -0.726,
    -0.45,
    0,
    -0.45,
    0,
    -0.45,
    0,
    0.629,
    -0.629,
    -4.759,
    -2.53,
    -3.564,
    -1.816,
    -4.654,
    -0.654,
    -2.935,
    0.517,
    -3.352,
    0.898,
    -4.313,
    2.49,
    -4.599,
    1.062,
    -5.212,
    1.693,
    -7.397,
    1.04,
    -9.16,
    1.287,
    -10.144,
    1.607,
    -10.75,
    2.285,
    -10.621,
    2.065,
    -8.685,
    1.066,
    -6.127,
    0.536,
    -3.304,
    3.937,
    -3.304,
    3.937,
    2.029,
    0.358,
    2.029,
    0.358,
    -4.01,
    2.315,
    -4.01,
    2.315,
    -4.3,
    5.125,
    -0.619,
    8.848,
    -2.349,
    1.411,
    -7.22,
    -0.759,
    -10.282,
    5.015,
    -8.618,
    9.572,
    -6.631,
    8.487,
    -4.704,
    3.947,
    -7.32,
    4.938,
    -7.043,
    6.568,
    -6.249,
    7.998,
    -7.081,
    4.425,
    -9.332,
    5.173,
    -8.293,
    7.467,
    1.952,
    4.831,
    2.931,
    3.493,
    3.503,
    3.383,
    3.767,
    2.175,
    1.732,
    1,
    1.732,
    1,
    -2.287,
    0.24,
    -3.759,
    1.368,
    -3.759,
    1.368,
    -0.45,
    0,
    -3.63,
    -2.012,
    0.629,
    -0.629,
    -5.168,
    -1.881,
    -3.737,
    -2.246,
    -2.807,
    -0.805,
    -3.975,
    -0.208,
    -3.347,
    1.023,
    -3.332,
    1.847,
    -4.172,
    1.686,
    -4.893,
    1.403,
    -5.31,
    1.226,
    -7.551,
    1.605,
    -8.81,
    2.197,
    -7.564,
    2.313,
    -6.148,
    1.419,
    -6.332,
    1.117,
    -7.064,
    1.631,
    -6.998,
    2.007,
    -5.825,
    1.561,
    -4.806,
    1.378,
    -3.989,
    2.793,
    -1.231,
    -3.383,
    -1.231,
    -3.383,
    -4.3,
    5.125,
    -4.3,
    5.125,
    -4.228,
    1.708,
    -8.601,
    4.195,
    -8.913,
    6.716,
    -7.389,
    7.389,
    -4.604,
    6.11,
    -6.269,
    4.724,
    -6.436,
    5.795,
    -7.32,
    6.591,
    -6.343,
    5.322,
    -7.842,
    5.092,
    -8.377,
    6.544,
    -8.715,
    6.809,
    0.18,
    5.147,
    0.967,
    1.819,
    0.472,
    1.168,
    3.002,
    1.464,
    1.732,
    1,
    1.732,
    1,
    0,
    0.86,
    -3.759,
    1.368,
    -3.759,
    1.368,
    -4.92,
    0,
    0,
    1.34,
    0,
    1.34,
    -3.939,
    -0.695,
    -3.939,
    -0.695,
    -7,
    0,
    -3.439,
    -0.921,
    -2.336,
    0.67,
    -3.263,
    1.591,
    -3.858,
    1.328,
    -4.211,
    1.875,
    -4.705,
    2.095,
    -5.279,
    0.931,
    -5.915,
    2.39,
    -6.02,
    1.956,
    -7.327,
    1.692,
    -7.101,
    1.125,
    -8.599,
    0.601,
    -6.983,
    1.106,
    -6.844,
    0.599,
    -5.077,
    0.177,
    -3.921,
    0.551,
    -1.231,
    -3.383,
    -1.231,
    -3.383,
    -4.3,
    5.125,
    -4.3,
    5.125,
    -8.843,
    3.937,
    -7.936,
    6.659,
    -7.359,
    7.106,
    -5.694,
    6.324,
    -4.872,
    5.807,
    -6.136,
    5.722,
    -6.43,
    5.59,
    -7.087,
    4.602,
    -7.246,
    4.706,
    -8.052,
    5.638,
    -9.527,
    6.187,
    -10.38,
    6.486,
    0.972,
    5.515,
    0.777,
    1.152,
    -0.94,
    2.327,
    0.931,
    1.827,
    0.677,
    2.933,
    1.509,
    2.154,
    1.919,
    0.067,
    1.052,
    -0.243,
    0.611,
    -0.531,
    -4.92,
    0,
    -4.92,
    0,
    -2.702,
    -1.437,
    -3.939,
    -0.695,
    -3.939,
    -0.695,
    -7,
    0,
    -7,
    0,
    -3.849,
    1.961,
    -3.746,
    0.796,
    -3.779,
    1.762,
    -3.748,
    2.342,
    -4.23,
    1.883,
    -2.708,
    2.708,
    -3.913,
    2.949,
    -4.089,
    2.457,
    -8.246,
    1.603,
    -9.975,
    1.225,
    -9.487,
    0.497,
    -9.307,
    -0.488,
    -9.63,
    -1.872,
    -9.339,
    -0.163,
    -8.978,
    0.471,
    -4.01,
    2.315,
    -4.01,
    2.315,
    -4.01,
    2.315,
    -8.848,
    4.508,
    -8.887,
    5.995,
    -6.923,
    6.923,
    -6.661,
    6.661,
    -6.39,
    6.853,
    -6.373,
    6.155,
    -6.619,
    5.754,
    -7.443,
    5.609,
    -7.727,
    5.212,
    -8.085,
    5.661,
    -8.83,
    6.183,
    -10.821,
    6.762,
    -10.978,
    7.129
  ]

//canvas ==================================================================================== START
//canvas ==================================================================================== START
//canvas ==================================================================================== START
//canvas ==================================================================================== START
//canvas ==================================================================================== START
//canvas ==================================================================================== START

//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START

var cn = document.getElementById('cw')              // 캔버스 객체
var c = cn.getContext('2d');                        // 캔버스
var a = []                                          // 바람 하나하나 객체의 배열
var cnx;                                            // 캔버스 width
var cny;                                            // 캔버스 height
var grid = []                                       // 위도 경도에 따른 그리드 배열
var currentFrame = 0                                // 애니메이션의 현재 프레임
var animationId                                     // 애니메이션 아이디 (정지시 필요)
var minlat = 31
var maxlat = 44
var minlng = 115
var maxlng = 138
var gap = 0.5
var showWind = false

var speed7 = {
    "dom": document.getElementById('speed7'),
    "color": "",
    "picker": document.getElementById('picker7')
}
var speed5 = {
    "dom": document.getElementById('speed5'),
    "color": "",
    "picker": document.getElementById('picker5')
}
var speed3 = {
    "dom": document.getElementById('speed3'),
    "color": "",
    "picker": document.getElementById('picker3')
}
var speed1 = {
    "dom": document.getElementById('speed1'),
    "color": "",
    "picker": document.getElementById('picker1')
}
var speed0 = {
    "dom": document.getElementById('speed0'),
    "color": "",
    "picker": document.getElementById('picker0')
}



var latgap = (maxlat * 10 - minlat * 10) / 10
var lnggap = (maxlng * 10 - minlng * 10) / 10
var windCount = 500;
var showSpeed = 1

//페이지 로드시 실행
window.onload = function myfunction() {
    init()
    readGrid()
}

//페이지 resize시 실행
window.onresize = () => {
    init();
}


//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END

// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START

//바람 객체 생성 
function build() {
    a = [];
    for (i = 0; i < windCount; i++) {
        buildobj(i)
    }
}


//바람 객체 생성 (실제 인스턴스 생성)
function buildobj(i) {
    x = getRandomArbitrary(0, cnx)
    y = getRandomArbitrary(0, cny)
    coordinate = map.getProjection()
    point = new kakao.maps.Point(x, y)
    a[i] = new ob(x, y, coordinate.coordsFromContainerPoint(point).La, coordinate.coordsFromContainerPoint(point).Ma, i, currentFrame)
}

//특정 인덱스 바람 객체 삭제
function removeObj(index) {
    buildobj(index)
    return 0;
}

//바람 객체 클래스
function ob(x, y, latitude, longitude, index, frame) {
    this.index = index                              // 객체배열에서 인덱스(삭제시 필요)
    this.x = x;                                     // 화면에서의 x 좌표
    this.y = y;                                     // 화면에서의 y 좌표
    this.latitude = latitude;                       // 지도에서의 위도
    this.longitude = longitude;                     // 지도에서의 경도
    this.frame = frame                              // 생성될 당시 프레임
    this.coordinate = map.getProjection()
    //바람 객체 이동 함수 (현재 좌표의 벡터를 받아 그 벡터 방향으로 이동)
    this.dr = function () {
        if (this.x > cnx || this.y > cny || this.x < 0 || this.y < 0) {                 //만약 캔버스 범위를 벗어나면 삭제
            return removeObj(this.index)
        } else {
            if (currentFrame - this.frame > getRandomArbitrary(100, 250)) {             // 100프레임 (1 ~ 2초) 에서 250프레임 (4초정도) 지나면 삭제
                removeObj(this.index)
            }
            const ls = {                                                                // 이동을 위한 현재 위치 기록
                x: this.x,
                y: this.y
            };

            nextVec = getVector(this.latitude, this.longitude)                          // 현재 좌표에서 벡터 계산
            this.x = ls.x + nextVec[0] * showSpeed                                                  // 현재 좌표에서 벡터만큼 이동                                                                                                      
            this.y = ls.y + nextVec[1] * showSpeed                                            // 현재 좌표에서 벡터만큼 이동                                                                                                      

            point = new kakao.maps.Point(this.x, this.y)
            this.latitude = coordinate.coordsFromContainerPoint(point).Ma               // 이동한 만큼 다시 현재 위치 계산
            this.longitude = coordinate.coordsFromContainerPoint(point).La              // 이동한 만큼 다시 현재 위치 계산

            c.beginPath();
            c.lineWidth = 2;
            if (nextVec[2] > 7) {
                c.strokeStyle = speed7.color;
            } else if (nextVec[2] > 5) {
                c.strokeStyle = speed5.color;
            } else if (nextVec[2] > 3) {
                c.strokeStyle = speed3.color;
            } else if (nextVec[2] > 1) {
                c.strokeStyle = speed1.color;
            } else {
                c.strokeStyle = speed0.color;
            }
            c.moveTo(ls.x, ls.y);
            c.lineTo(this.x, this.y);
            c.stroke();
            c.closePath();

            //기록한 현재 위치와 바뀐 위치까지 그림.
        }
    }
}
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END

//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START

//현재 위도와 경도의 벡터 리턴
function getVector(latitude, longitude) {
    if (latitude <= minlat || latitude >= maxlat) return [0, 0, 0]             // 만약 위도 33 이하, 38 이상이면 1, -1 벡터 리턴
    if (longitude <= minlng || longitude >= maxlng) return [0, 0, 0]         // 만약 경도 124 이하, 130 이상이면 1, -1 벡터 리턴

    gridn = selectGrid(latitude, longitude);                            // 현재 벡터에서 그리드 계산
    g00 = grid[gridn[0]][gridn[1]]
    g10 = grid[gridn[0]][gridn[1] + 1]
    g01 = grid[gridn[0] + 1][gridn[1]]
    g11 = grid[gridn[0] + 1][gridn[1] + 1]
    // 현재 좌표를 감싸는 네(4) 그리드 계산

    return interpolate(latitude, longitude, g00, g10, g01, g11, gridn)      // 4 그리드로 보간값 구해서 리턴
}


//위도와 경도를 가지고 적절한 그리드 리턴 (경도 0.25 단위 , 위도 0.25 단위로 쪼개어져 있음.)
function selectGrid(latitude, longitude) {

    gridlng = Math.floor(((longitude * 10 - minlng * 10) / (gap * 10)))
    gridlat = Math.floor(((maxlat * 10 - latitude * 10) / (gap * 10)))

    return [gridlat, gridlng]
}

//위도 경도. 그리드로 보간값 계산
var interpolate = function (latitude, longitude, g00, g10, g01, g11, gridn) {
    x = (longitude % gap) * (1 / gap)

    d1 = x
    d2 = 1 - x

    var x1_vector_x
    var x1_vector_y
    var x2_vector_x
    var x2_vector_y
    try {
        x1_vector_x = d1 * g10[0] + d2 * g00[0]
        x1_vector_y = d1 * g10[1] + d2 * g00[1]
        x2_vector_x = d1 * g11[0] + d2 * g01[0]
        x2_vector_y = d1 * g11[1] + d2 * g01[1]
    } catch (error) {
        debugger;
    }


    y = (latitude % gap) * (1 / gap)
    d4 = y
    d3 = 1 - y

    result_vector_x = d3 * x2_vector_x + d4 * x1_vector_x
    result_vector_y = d3 * x2_vector_y + d4 * x1_vector_y
    result_vector_scale = Math.sqrt(result_vector_x * result_vector_x + result_vector_y * result_vector_y)

    result_vector = [result_vector_x, result_vector_y, result_vector_scale]
    return result_vector                //보간값 리턴
}

//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END

// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START

//캔버스 초기값 세팅
function init() {
    cn.width = window.innerWidth
    cn.height = window.innerHeight
    cnx = cn.width - 1
    cny = cn.height - 1
    c.linewidth = "1";
    windCount = document.getElementById("range1").value
    showSpeed = document.getElementById("range2").value

    speed7.color = speed7.picker.value
    speed7.dom.style.backgroundColor = speed7.color

    speed5.color = speed5.picker.value
    speed5.dom.style.backgroundColor = speed5.color

    speed3.color = speed3.picker.value
    speed3.dom.style.backgroundColor = speed3.color

    speed1.color = speed1.picker.value
    speed1.dom.style.backgroundColor = speed1.color

    speed0.color = speed0.picker.value
    speed0.dom.style.backgroundColor = speed0.color

}

// 위.경도 그리드값 읽어오기
function readGrid() {
    debugger;
    var count = 0;
    for (i = 0; i < ((latgap * 10) / (gap * 10)) + 1; i++) {
        grid[i] = []
        for (j = 0; j < ((lnggap * 10) / (gap * 10)) + 1; j++) {
            grid[i][j] = []
            grid[i][j][0] = gridData[count++]
            grid[i][j][1] = gridData[count++]
            grid[i][j][2] = count / 2
        }
    }
    alert("준비가 완료되었습니다.")
}

//min, max 랜덤값 리턴
function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}




function writeGridData() {
    i = 0;
    gridData.forEach(data => {
        document.write(data, ',');
        i++;
        if (i == 20) {
            i = 0;
            document.write("<br>")
        }
    })
}


// 애니메이션 생성
function anim() {
    currentFrame++
    animationId = requestAnimationFrame(anim)
    c.fillStyle = "rgba(255, 255, 255, 0.2)"
    c.fillRect(0, 0, cn.width, cn.height);
    a.forEach(function (e, i) {
        e.dr();
    });
}

//에니메이션 정지
function stopAnim() {
    cancelAnimationFrame(animationId)
}

var windCountDiv = document.getElementById('windCount');
var gauge = document.getElementById('range1')
windCountDiv.innerHTML = gauge.value

var showSpeedDiv = document.getElementById("showSpeed");
var gauge2 = document.getElementById("range2");
showSpeedDiv.innerHTML = gauge2.value

gauge.oninput = function () {
    windCountDiv.innerHTML = this.value
    windCount = this.value
    build()
}


gauge2.oninput = function () {
    showSpeedDiv.innerHTML = this.value
    showSpeed = this.value
    build()
}

document.getElementById('playWind').addEventListener('click',toggleWindLayer)

function toggleWindLayer() {
    if (showWind) {
        a = []
        stopAnim()
        init()
        showWind = !showWind
    } else {
        build()
        anim()
        showWind = !showWind
    }
}

speed7.picker.addEventListener("input", e => {
    speed7.color = e.target.value
    speed7.dom.style.backgroundColor = speed7.color
}, false)

speed5.picker.addEventListener("input", e => {
    speed5.color = e.target.value
    speed5.dom.style.backgroundColor = speed5.color

}, false)

speed3.picker.addEventListener("input", e => {
    speed3.color = e.target.value
    speed3.dom.style.backgroundColor = speed3.color
}, false)

speed1.picker.addEventListener("input", e => {
    speed1.color = e.target.value
    speed1.dom.style.backgroundColor = speed1.color
}, false)

speed0.picker.addEventListener("input", e => {
    speed0.color = e.target.value
    speed0.dom.style.backgroundColor = speed0.color
}, false)


// 애니메이션, 기타 --------------------------------------------------------------------------- END

//canvas ================================================================================== END


//kakao map =============================================================================== START

// 카카오맵 변수 선언 ------------------------------------------------------------------------- START

var container = document.getElementById('map');                 //지도를 그릴 element
var options = {
    center: new kakao.maps.LatLng(37.151198243701934, 128.22723681773422),
    level: 12
};                                                              //지도의 설정 정보

var map = new kakao.maps.Map(container, options);               // container element에 맵 객체 생성

var mapProjection = map.getProjection()
var point;

// 카카오맵 변수 선언 -------------------------------------------------------------------- END

// 카카오맵 이벤트 등록 ------------------------------------------------------------------- START

container.addEventListener('click', e => {
    point = new kakao.maps.Point(e.pageX, e.pageY)
    console.log(point, mapProjection.coordsFromContainerPoint(point))
    var windSpeed = document.getElementById('windSpeed')
    vector = getVector(mapProjection.coordsFromContainerPoint(point).Ma, mapProjection.coordsFromContainerPoint(point).La)
    windSpeed.innerHTML =
        `${mapProjection.coordsFromContainerPoint(point).Ma.toFixed(3)}, ${mapProjection.coordsFromContainerPoint(point).La.toFixed(3)}, 
    vector : ${vector[0].toFixed(3)}, ${vector[1].toFixed(3)} scale: ${vector[2].toFixed(3)}m/s zoomLevel: ${map.getLevel()}`

})
// kakao.maps.event.addListener(map, 'dragend', () => {
//     build()
// })

// kakao.maps.event.addListener(map, 'zoom_changed', () => {
//     build()
// })

// 카카오맵 이벤트 등록 ----------------------------------------------------------------- END


//kakao map ===================================================================== END

