var gridData = 
[
    5.965,
    -0.732,
    6.839,
    -0.119,
    6.176,
    0.649,
    6.635,
    1.532,
    6.815,
    1.202,
    8.309,
    3.189,
    8.29,
    5.805,
    7.366,
    6.403,
    5.622,
    4.237,
    6.456,
    6.456,
    4.947,
    5.691,
    5.959,
    7.101,
    5.163,
    4.815,
    4.032,
    5.55,
    4.128,
    6.606,
    3.86,
    5.513,
    3.135,
    5.43,
    2.61,
    5.123,
    2.375,
    5.335,
    2.102,
    4.952,
    0.868,
    4.924,
    0.868,
    4.924,
    0.868,
    4.924,
    0.868,
    4.924,
    3.317,
    1.547,
    2.377,
    3.155,
    1.83,
    2.428,
    -1.086,
    0.172,
    -0.314,
    1.783,
    1.529,
    1.888,
    -0.479,
    2.075,
    -1.452,
    1.503,
    -1.106,
    0.175,
    -1.316,
    4.303,
    2,
    3.464,
    -2.87,
    3.544,
    -0.644,
    2.405,
    -1.65,
    1.485,
    -2.117,
    -0.373,
    -2.429,
    -0.981,
    -1.378,
    -1.531,
    -2.056,
    0.629,
    -3.357,
    2.719,
    -1.589,
    0.055,
    -0.998,
    -0.508,
    0.518,
    1.503,
    -1.105,
    -1.994,
    5.082,
    -0.534,
    6.042,
    -0.317,
    7.34,
    0.771,
    7.682,
    4.435,
    6.737,
    4.048,
    7.876,
    3.673,
    5.949,
    1.156,
    6.942,
    5.424,
    8.597,
    5.799,
    6.757,
    5.669,
    5.432,
    5.625,
    4.901,
    5.638,
    5.387,
    6.652,
    4.902,
    6.054,
    4.211,
    6.243,
    3.72,
    5.953,
    3.466,
    5.546,
    2.783,
    5.462,
    2.521,
    4.741,
    2.299,
    4.93,
    3.016,
    5.44,
    0.868,
    4.924,
    0.868,
    4.924,
    2.456,
    3.144,
    2.805,
    2.709,
    1.152,
    3.768,
    5.269,
    4.267,
    1.306,
    2.8,
    0.971,
    2.669,
    0.469,
    2.415,
    -0.427,
    2.696,
    -0.781,
    3.381,
    -2.155,
    2.758,
    2,
    3.464,
    2,
    3.464,
    2,
    3.464,
    2,
    3.464,
    -2.801,
    -0.751,
    -2.482,
    -2.397,
    -1.089,
    -0.153,
    -3.026,
    2.041,
    -3.819,
    -2.205,
    -4.964,
    -3.879,
    -5.275,
    -3.832,
    -5.368,
    -2.169,
    -3.676,
    0.322,
    -1.323,
    -0.617,
    6.864,
    1.087,
    7.825,
    2.244,
    7.33,
    2.668,
    7.975,
    3.551,
    8.501,
    3.964,
    8.607,
    2.797,
    10.586,
    3.237,
    10.282,
    6.677,
    7.762,
    7.495,
    8.123,
    8.71,
    6.235,
    7.431,
    5.267,
    7.249,
    5.783,
    7.142,
    5.904,
    7.557,
    4.625,
    7.697,
    3.864,
    7.267,
    3.094,
    6.634,
    2.884,
    5.914,
    2.18,
    5.396,
    2.911,
    5.968,
    3.137,
    6.157,
    2.859,
    6.422,
    3.275,
    6.714,
    3.792,
    4.52,
    3.178,
    3.925,
    2.628,
    3.896,
    0.925,
    4.005,
    1.773,
    3.983,
    2.392,
    2.08,
    0.263,
    1.872,
    2.119,
    0.813,
    0.111,
    0.63,
    -2.624,
    3.241,
    2,
    3.464,
    2,
    3.464,
    2,
    3.464,
    -4.649,
    -1.785,
    -4.656,
    -1.248,
    -3.917,
    0.761,
    -5.706,
    5.706,
    -5.377,
    -5.568,
    -5.712,
    -4.626,
    -7.061,
    -4.944,
    -7.129,
    -4.629,
    -6.168,
    -4.16,
    -5.435,
    -2.769,
    -3.797,
    -1.089,
    7.602,
    2.618,
    7.289,
    3.555,
    8.135,
    4.888,
    7.212,
    5.434,
    7.487,
    6.508,
    7.116,
    6.636,
    6.504,
    3.755,
    5.579,
    4.359,
    5.959,
    8.511,
    5.477,
    7.268,
    5.995,
    8.252,
    5.38,
    7.684,
    5.205,
    9.015,
    5.408,
    9,
    4.516,
    8.494,
    3.29,
    7.391,
    2.641,
    6.537,
    2.567,
    6.048,
    2.397,
    5.934,
    3.466,
    6.254,
    3.188,
    5.995,
    3.992,
    6.643,
    3.803,
    5.637,
    4.776,
    3.344,
    3.995,
    3.995,
    3.559,
    4.555,
    2.738,
    3.263,
    3.072,
    2.966,
    -0.29,
    2.755,
    0.51,
    2.047,
    0.533,
    1.99,
    1.425,
    2.571,
    -5.615,
    13.228,
    2.383,
    -4.678,
    -4.906,
    -9.227,
    -13.176,
    -8.556,
    -13.477,
    -6.284,
    -11.219,
    -4.533,
    -8.606,
    -3.831,
    -6.927,
    -4.499,
    -7.273,
    -5.683,
    -7.747,
    -5.838,
    -8.134,
    -5.696,
    -6.981,
    -6.069,
    -7.277,
    -6.106,
    -6.152,
    -4.308,
    -5.144,
    -1.975,
    6.948,
    5.236,
    8.003,
    5.604,
    7.289,
    5.296,
    8.365,
    7.019,
    9.493,
    8.852,
    5.763,
    5.374,
    3.652,
    2.194,
    5.125,
    1.089,
    6.895,
    7.394,
    3.485,
    7.145,
    5.578,
    9.283,
    4.418,
    8.309,
    4.239,
    9.987,
    4.011,
    8.601,
    3.763,
    8.864,
    2.728,
    7.923,
    1.216,
    6.894,
    1.216,
    6.894,
    1.216,
    6.894,
    2.802,
    4.663,
    3.35,
    4.611,
    3.15,
    5.925,
    2.485,
    5.582,
    3.292,
    4.702,
    2.88,
    5.195,
    2.797,
    5.489,
    3.25,
    4.313,
    1.276,
    4.451,
    0.727,
    1.799,
    -0.025,
    1.41,
    0.15,
    4.307,
    -2.337,
    12.025,
    4.704,
    -3.675,
    -0.864,
    -7.037,
    -4.216,
    -6.491,
    -8.447,
    -8.747,
    -9.871,
    -7.438,
    -9.781,
    -6.849,
    -9.077,
    -6.595,
    -7.967,
    -7.173,
    -8.92,
    -6.969,
    -9.08,
    -6.843,
    -8.801,
    -6.632,
    -8.511,
    -5.959,
    -7.715,
    -5.814,
    -6.943,
    -4.172,
    -6.208,
    -2.383,
    6.375,
    4.3,
    7.047,
    5.12,
    7.683,
    6.447,
    8.687,
    7.551,
    7.802,
    8.367,
    5.308,
    7.305,
    3.797,
    5.226,
    3.88,
    2.24,
    1.792,
    4.924,
    3.7,
    7.586,
    4.035,
    9.062,
    3.664,
    9.068,
    3.892,
    10.139,
    3.952,
    9.782,
    2.326,
    8.113,
    2.549,
    7.846,
    1.216,
    6.894,
    1.216,
    6.894,
    1.216,
    6.894,
    3.689,
    3.82,
    4.347,
    5.563,
    2.896,
    5.685,
    2.225,
    4.997,
    2.61,
    3.592,
    3.065,
    5.309,
    3.55,
    5.682,
    4.063,
    1.981,
    2.45,
    0.043,
    0.727,
    -1.312,
    -0.332,
    1.881,
    2.033,
    9.566,
    4.288,
    3.861,
    3.064,
    -6.283,
    -3.086,
    -8.038,
    -6.356,
    -7.849,
    -5.62,
    -10.569,
    -6.794,
    -10.872,
    -7.932,
    -10.526,
    -8.914,
    -9.559,
    -9.164,
    -9.164,
    -9.383,
    -8.75,
    -9.937,
    -7.763,
    -9.915,
    -6.688,
    -8.78,
    -5.922,
    -8.669,
    -5.005,
    -7.937,
    -3.207,
    -7.561,
    -1.746,
    4.972,
    5.522,
    7.098,
    4.435,
    6.016,
    6.229,
    2.152,
    1.564,
    3.874,
    6.199,
    4.217,
    5.398,
    5.279,
    5.863,
    6.613,
    3.516,
    2.134,
    4.188,
    2.881,
    8.368,
    3.427,
    9.416,
    3.215,
    8.833,
    3,
    9.812,
    2.889,
    9.448,
    2.509,
    8.205,
    2.823,
    8.198,
    2.472,
    7.608,
    3.427,
    6.446,
    4.072,
    5.816,
    2.843,
    7.037,
    2.278,
    5.637,
    2.211,
    7.709,
    2.889,
    3.567,
    2.933,
    3.622,
    3.964,
    3.097,
    1.838,
    2.191,
    0,
    2.6,
    1.293,
    0.42,
    -0.282,
    -0.19,
    -0.278,
    1.981,
    -0.453,
    8.638,
    1.285,
    0.112,
    -4.607,
    -9.879,
    -1.427,
    -9.008,
    -3.681,
    -8.671,
    -3.691,
    -7.244,
    -4.522,
    -12.423,
    -6.864,
    -12.909,
    -9.012,
    -11.129,
    -9.857,
    -9.857,
    -10.04,
    -9.04,
    -10.358,
    -7.806,
    -10.706,
    -6.433,
    -9.133,
    -5.707,
    -9.226,
    -4.302,
    -8.76,
    -2.678,
    -8.568,
    -1.511,
    8.096,
    7.55,
    11.62,
    0,
    11.62,
    0,
    4,
    6.928,
    4,
    6.928,
    3.635,
    4.824,
    4.272,
    8.384,
    5.843,
    8.042,
    3.521,
    4.672,
    2.208,
    8.239,
    2.88,
    8.864,
    2.852,
    8.778,
    2.485,
    9.965,
    2.938,
    10.247,
    4.091,
    10.125,
    2.587,
    8.463,
    4.953,
    9.721,
    5.463,
    8.412,
    5.604,
    9.326,
    4.956,
    7.632,
    3.834,
    5.904,
    1.2,
    5.644,
    2.639,
    3.913,
    3.271,
    2.745,
    3.298,
    1.468,
    1.586,
    -0.111,
    0.151,
    -1.432,
    1.052,
    -0.243,
    0,
    1.32,
    1.246,
    -2.074,
    2.404,
    -8.382,
    1.361,
    -12.949,
    -4.118,
    -11.961,
    -3.013,
    -10.507,
    -1.229,
    -8.744,
    0.967,
    -6.882,
    0.518,
    -9.876,
    -5.171,
    -13.472,
    -8.511,
    -12.618,
    -9.71,
    -11.17,
    -10.466,
    -9.759,
    -9.874,
    -8.286,
    -11.116,
    -6.162,
    -9.227,
    -4.906,
    -9.049,
    -3.841,
    -9.553,
    -1.684,
    -9.684,
    -0.338,
    7.739,
    3.774,
    11.62,
    0,
    0.629,
    0.629,
    4,
    6.928,
    4,
    6.928,
    0,
    16.09,
    0,
    16.09,
    5.541,
    7.913,
    5.36,
    5.953,
    2.135,
    5.285,
    2.696,
    8.817,
    3.662,
    11.27,
    2.85,
    11.43,
    2.949,
    11.828,
    3.978,
    9.847,
    3.91,
    10.185,
    5.314,
    9.586,
    6.249,
    11.274,
    5.519,
    7.323,
    6.421,
    8.521,
    5.393,
    5.99,
    5.481,
    5.676,
    5.816,
    3.224,
    3.969,
    1.213,
    4.609,
    1.149,
    0.302,
    -0.483,
    1.376,
    0.928,
    1.12,
    2.402,
    7.604,
    -3.546,
    9.185,
    -7.707,
    13.098,
    -9.516,
    4.295,
    -14.048,
    -0.489,
    -14.001,
    -0.206,
    -11.798,
    2.863,
    -10.683,
    3.087,
    -10.766,
    0.772,
    -14.74,
    -1.582,
    -15.047,
    -7.831,
    -14.728,
    -9.106,
    -11.655,
    -9.572,
    -9.913,
    -9.652,
    -8.099,
    -9.93,
    -6.449,
    -9.779,
    -4.769,
    -9.179,
    -3.709,
    -9.895,
    -1.923,
    -9.974,
    -0.348,
    4.124,
    5.89,
    -0.097,
    -0.794,
    0.629,
    0.629,
    4,
    6.928,
    4.5,
    7.794,
    4.5,
    7.794,
    0,
    16.09,
    5.49,
    8.786,
    5.795,
    7.691,
    6.992,
    7.766,
    4.008,
    9.921,
    4.077,
    11.201,
    4.515,
    11.763,
    5.785,
    6.894,
    4.849,
    9.516,
    4.856,
    10.413,
    8.209,
    12.17,
    7.16,
    12.401,
    11.363,
    11.363,
    10.859,
    8.484,
    10.685,
    6.939,
    10.728,
    3.486,
    9.863,
    1.386,
    8.328,
    -0.729,
    9.07,
    -0.953,
    11.723,
    -0.409,
    12.386,
    -4.265,
    12.912,
    -7.455,
    12.119,
    -7.573,
    10.922,
    -8.533,
    13.6,
    -7.539,
    5.041,
    -13.851,
    2.891,
    -14.872,
    2.428,
    -13.768,
    3.729,
    -13.006,
    3.985,
    -13.034,
    -0.259,
    -14.818,
    -4.647,
    -16.207,
    -5.904,
    -13.909,
    -8.052,
    -10.686,
    -9.408,
    -8.471,
    -9.32,
    -7.023,
    -8.981,
    -5.612,
    -10.006,
    -5.098,
    -9.635,
    -3.318,
    -9.868,
    -1.74,
    -10.07,
    0,
    5.28,
    4.924,
    4.177,
    5.543,
    -1.966,
    -0.418,
    1.811,
    9.316,
    4.5,
    7.794,
    4.5,
    7.794,
    4.5,
    7.794,
    7.058,
    8.411,
    7.655,
    11.35,
    8.464,
    10.453,
    7.714,
    9.874,
    5.502,
    11.8,
    5.785,
    6.894,
    5.785,
    6.894,
    5.785,
    6.894,
    8.845,
    13.62,
    9.727,
    12.451,
    11.504,
    10.728,
    12.41,
    9.017,
    13.522,
    9.12,
    13.183,
    7.921,
    11.09,
    4.938,
    10.564,
    3.029,
    9.112,
    1.119,
    9.557,
    -0.668,
    11.289,
    -1.587,
    11.285,
    -1.386,
    13.513,
    -4.918,
    11.725,
    -7.614,
    13.083,
    -8.496,
    10.74,
    -10.371,
    8.208,
    -13.136,
    4.095,
    -15.281,
    4.491,
    -14.689,
    3.75,
    -13.996,
    0.523,
    -14.981,
    -3.202,
    -15.063,
    -4.187,
    -13.694,
    -4.548,
    -11.256,
    -7.585,
    -9.708,
    -8.14,
    -6.36,
    -10.426,
    -5.085,
    -10.337,
    -4.388,
    -9.616,
    -3.311,
    -10.003,
    -1.944,
    -10.234,
    -1.076,
    -10.438,
    0.182,
    0,
    2,
    1.471,
    4.81,
    3.264,
    6.406,
    0.899,
    6.397,
    3.728,
    10.243,
    5.581,
    8.274,
    7.97,
    10.97,
    8.601,
    11.009,
    8.317,
    11.037,
    8.621,
    12.312,
    8.409,
    12.009,
    10.195,
    11.728,
    5.785,
    6.894,
    5.785,
    6.894,
    5.785,
    6.894,
    11.291,
    14.452,
    13.381,
    11.632,
    14.136,
    10.652,
    15.206,
    9.501,
    15.078,
    9.06,
    12.682,
    7.03,
    11.284,
    6,
    9.903,
    4.409,
    11.289,
    3.668,
    3.568,
    -2.06,
    3.568,
    -2.06,
    9.275,
    -0.811,
    5.062,
    0.893,
    5.062,
    0.893,
    14.093,
    -6.572,
    9.056,
    -11.592,
    7.784,
    -11.54,
    5.4,
    -14.838,
    5.436,
    -14.162,
    3.678,
    -13.726,
    -0.502,
    -14.371,
    -3.561,
    -13.291,
    -3.619,
    -11.137,
    -5.445,
    -9.431,
    -7.173,
    -7.967,
    -8.999,
    -7.288,
    -9.356,
    -4.767,
    -10.349,
    -2.2,
    -9.932,
    -1.396,
    -10.161,
    -0.889,
    -10.006,
    0.524,
    -10.272,
    1.627,
    0,
    2,
    2.75,
    2.564,
    2.408,
    6.615,
    1.59,
    6.889,
    2.899,
    7.553,
    6.312,
    9.72,
    8.413,
    11.165,
    8.047,
    11.075,
    9.44,
    9.776,
    10.079,
    10.438,
    9.678,
    12.388,
    10.415,
    12.862,
    12.187,
    13.069,
    11.712,
    12.128,
    11.763,
    14.019,
    12.365,
    13.259,
    13.129,
    13.596,
    13.585,
    11.809,
    13.237,
    11.107,
    15.163,
    10.228,
    14.985,
    9.364,
    10.783,
    6.479,
    11.081,
    5.892,
    8.617,
    1.519,
    3.568,
    -2.06,
    3.568,
    -2.06,
    5.062,
    0.893,
    5.062,
    0.893,
    5.062,
    0.893,
    12.079,
    -8.147,
    7.27,
    -9.648,
    7.638,
    -12.712,
    7.885,
    -13.123,
    5.8,
    -13.027,
    5.949,
    -12.197,
    0,
    -13.46,
    -1.924,
    -10.912,
    -3.448,
    -9.472,
    -5.855,
    -9.016,
    -7.591,
    -7.079,
    -8.045,
    -4.645,
    -8.406,
    -2.894,
    -10.074,
    -1.596,
    -9.98,
    0,
    -8.54,
    0,
    -6.172,
    1.312,
    -6.387,
    0.898,
    4.054,
    6.011,
    0.719,
    1.474,
    2.385,
    4.485,
    2.014,
    7.515,
    3.441,
    7.729,
    4.422,
    6.81,
    7.354,
    8.167,
    7.514,
    9.279,
    9.732,
    10.078,
    10.255,
    13.609,
    11.381,
    9.893,
    8.839,
    9.478,
    8.913,
    9.899,
    12.178,
    11.761,
    13.932,
    12.111,
    15.886,
    12.412,
    16.416,
    11.494,
    18.035,
    9.997,
    13.593,
    10.62,
    13.872,
    10.454,
    14.81,
    10.37,
    15.926,
    9.569,
    7.883,
    6.614,
    7.883,
    6.614,
    6.287,
    2.288,
    0.352,
    -0.968,
    3.872,
    -1.409,
    3.872,
    -1.409,
    3.872,
    -1.409,
    5.553,
    -8.232,
    7.472,
    -11.957,
    8.453,
    -10.819,
    7.806,
    -11.149,
    6.307,
    -11.379,
    4.892,
    -11.525,
    0.587,
    -11.195,
    -1.057,
    -10.055,
    -4.366,
    -9.362,
    -5.475,
    -6.761,
    -7.229,
    -4.695,
    -7.824,
    -3.321,
    -8.888,
    -2.216,
    -9.674,
    -0.338,
    -7.603,
    1.341,
    -7.603,
    1.341,
    -7.603,
    1.341,
    -10.59,
    0.926,
    2.88,
    4.27,
    2.253,
    4.238,
    1.872,
    4.015,
    2.958,
    5.563,
    2.386,
    6.931,
    3.995,
    7.207,
    4.843,
    8.737,
    8.044,
    8.33,
    8.446,
    10.066,
    9.427,
    9.761,
    8.139,
    10.418,
    9.617,
    9.617,
    10.219,
    8.883,
    9.085,
    8.774,
    9.639,
    9.308,
    11.749,
    9.18,
    14.222,
    11.517,
    16.805,
    11.335,
    14.828,
    12.007,
    12.755,
    11.087,
    14.295,
    10.386,
    15.689,
    9.804,
    7.883,
    6.614,
    8.019,
    4.63,
    8.019,
    4.63,
    5.66,
    0,
    5.66,
    0,
    3.872,
    -1.409,
    3.872,
    -1.409,
    8.702,
    -7.836,
    8.198,
    -8.791,
    9.31,
    -8.682,
    6.811,
    -10.098,
    6.659,
    -9.51,
    4.507,
    -10.122,
    0.171,
    -9.789,
    -0.906,
    -8.623,
    -3.704,
    -6.966,
    -4.082,
    -6.052,
    -4.982,
    -4.034,
    -6.258,
    -1.794,
    -7.43,
    0,
    -8.165,
    -0.858,
    -7.603,
    1.341,
    -7.603,
    1.341,
    0,
    1.03,
    -0.039,
    0.448,
    4.174,
    2.41,
    3.82,
    5.456,
    1.798,
    5.535,
    2.705,
    5.546,
    3.903,
    7.041,
    4.137,
    8.873,
    3.998,
    8.197,
    5.614,
    9.343,
    7.489,
    9.248,
    9.14,
    10.151,
    5.142,
    6.128,
    5.142,
    6.128,
    5.142,
    6.128,
    12.064,
    9.426,
    12.608,
    9.851,
    12.545,
    9.801,
    12.544,
    11.295,
    15.122,
    11.815,
    16.02,
    10.01,
    14.157,
    9.194,
    13.888,
    10.466,
    15.304,
    10.323,
    16.758,
    9.675,
    5.952,
    7.094,
    5.66,
    0,
    5.66,
    0,
    3.545,
    -0.625,
    3.545,
    -0.625,
    6.665,
    -4.496,
    8.539,
    -4.93,
    8.228,
    -7.672,
    9.408,
    -8.471,
    7.722,
    -8.883,
    6.715,
    -8.292,
    4.057,
    -8.701,
    1.538,
    -7.912,
    -0.837,
    -6.819,
    -2.819,
    -6.331,
    -3.274,
    -4.345,
    -4.743,
    -1.45,
    -5.399,
    0.094,
    -3.78,
    0,
    1.652,
    -1.969,
    1.652,
    -1.969,
    0,
    1.03,
    0,
    1.03,
    0,
    2.06,
    4.166,
    3.621,
    3.571,
    3.697,
    2.513,
    7.299,
    2.312,
    6.352,
    4.16,
    6.168,
    4.68,
    6.939,
    6.743,
    8.036,
    5.833,
    8.331,
    5.977,
    8.536,
    7.748,
    8.913,
    5.142,
    6.128,
    5.142,
    6.128,
    5.142,
    6.128,
    13.743,
    11.532,
    12.415,
    10.792,
    12.46,
    10.832,
    13.154,
    11.844,
    14.31,
    12.007,
    14.607,
    11.007,
    13.647,
    11.051,
    14.318,
    11.187,
    14.473,
    10.515,
    5.952,
    7.094,
    5.952,
    7.094,
    5.952,
    7.094,
    3.545,
    -0.625,
    3.545,
    -0.625,
    1.652,
    1.969,
    1.652,
    1.969,
    7.217,
    -3.677,
    8.702,
    -7.836,
    9.802,
    -8.826,
    8.023,
    -6.974,
    7.134,
    -6.424,
    3.945,
    -6.833,
    1.426,
    -6.178,
    -2.06,
    0,
    -2.06,
    0,
    -0.267,
    1.517,
    -1.18,
    -0.99,
    -1.18,
    -0.99,
    1.048,
    -3.045,
    1.652,
    -1.969,
    1.652,
    -1.969,
    1.652,
    -1.969,
    0,
    2.06,
    0,
    2.06,
    0,
    4.3,
    1.917,
    4.995,
    2.371,
    5.869,
    2.817,
    6.972,
    2.644,
    7.264,
    5.192,
    6.411,
    5.155,
    7.095,
    5.906,
    6.334,
    5.89,
    8.106,
    6.301,
    8.673,
    10.079,
    10.438,
    11.779,
    10.606,
    11.964,
    11.964,
    11.912,
    11.504,
    13.384,
    12.051,
    12.63,
    11.778,
    13.281,
    12.385,
    14.517,
    12.181,
    14.051,
    11.378,
    14.272,
    10.754,
    15.261,
    10.686,
    15.292,
    9.188,
    3.966,
    4.726,
    5.952,
    7.094,
    5.952,
    7.094,
    7.599,
    4.748,
    3.545,
    -0.625,
    3.545,
    -0.625,
    5.343,
    -3.085,
    5.343,
    -3.085,
    11.59,
    -7.818,
    10.274,
    -6.672,
    8.118,
    -5.684,
    6.763,
    -4.914,
    5.134,
    -4.788,
    1.285,
    2.226,
    1.285,
    2.226,
    -2.06,
    0,
    -0.267,
    1.517,
    -1.18,
    -0.99,
    -1.18,
    -0.99,
    1.488,
    -0.758,
    0.807,
    0.376,
    -0.728,
    -0.051,
    0.029,
    -0.839,
    1.539,
    -0.622,
    1.28,
    -1.28,
    -0.064,
    3.679,
    -0.095,
    5.419,
    1.507,
    6.528,
    2.708,
    6.704,
    3.275,
    7.024,
    4.92,
    8.522,
    3.873,
    6.446,
    4.165,
    7.214,
    5.867,
    7.51,
    7.494,
    10.315,
    8.958,
    11.466,
    10.741,
    11.519,
    10.83,
    11.614,
    12.295,
    12.732,
    12.233,
    12.233,
    12.434,
    12.876,
    13.089,
    13.089,
    13.934,
    12.546,
    13.466,
    12.125,
    13.555,
    12.205,
    14.31,
    11.18,
    13.638,
    9.199,
    3.966,
    4.726,
    3.966,
    4.726,
    3.966,
    4.726,
    8.32,
    0.582,
    3.545,
    -0.625,
    3.545,
    -0.625,
    5.343,
    -3.085,
    5.343,
    -3.085,
    11.691,
    -5.452,
    9.184,
    -5.091,
    8.117,
    -4.136,
    2.904,
    1.057,
    2.904,
    1.057,
    1.285,
    2.226,
    1.285,
    2.226,
    0.537,
    -3.043,
    0.537,
    -3.043,
    -1.18,
    -0.99,
    -0.267,
    -1.517,
    -2.029,
    -0.358,
    0.807,
    0.376,
    1.54,
    0,
    1.54,
    0,
    -0.89,
    0.016,
    0,
    3.09,
    0.06,
    3.449,
    -0.182,
    5.207,
    0.375,
    7.15,
    2.127,
    7.94,
    2.986,
    7.39,
    3.945,
    7.743,
    3.559,
    6.985,
    5.007,
    6.645,
    5.418,
    6.934,
    5.076,
    7.816,
    7.508,
    10.723,
    9.469,
    12.12,
    9.99,
    13.257,
    10.906,
    13.468,
    11.577,
    13.796,
    11.001,
    13.585,
    12.038,
    13.369,
    12.728,
    12.728,
    13.955,
    12.131,
    13.328,
    11.586,
    13.76,
    10.369,
    12.418,
    10.42,
    3.966,
    4.726,
    3.966,
    4.726,
    11.053,
    2.349,
    12.183,
    1.066,
    12.689,
    0.887,
    12.659,
    0.885,
    0,
    2.57,
    0,
    2.57,
    0,
    2.57,
    8.737,
    -3.008,
    2.904,
    -1.057,
    2.904,
    1.057,
    -2.976,
    -3.547,
    -2.976,
    -3.547,
    0,
    -2.06,
    0.537,
    -3.043,
    0.537,
    -3.043,
    0,
    5.14,
    0.358,
    2.029,
    0,
    0.51,
    0,
    0.51,
    1.54,
    0,
    1.233,
    0.524,
    -0.89,
    0.016,
    0,
    3.09,
    0.319,
    3.646,
    0.57,
    4.645,
    0.809,
    5.753,
    1.437,
    7.392,
    2.456,
    8.033,
    3.321,
    7.824,
    3.718,
    8.35,
    3.441,
    7.056,
    4.223,
    6.759,
    4.125,
    6.866,
    4.581,
    8.265,
    7.308,
    12.163,
    8.965,
    12.803,
    9.858,
    13.082,
    9.74,
    13.405,
    9.876,
    13.106,
    10.243,
    13.593,
    11.214,
    13.849,
    12.177,
    12.61,
    11.837,
    11.837,
    11.957,
    11.957,
    11.83,
    12.25,
    12.07,
    12.07,
    5.794,
    3.345,
    14.566,
    3.903,
    14.073,
    4.035,
    13.169,
    3.776,
    12.818,
    3.435,
    0,
    2.57,
    0,
    2.57,
    3.6,
    0,
    3.6,
    0,
    0,
    1.03,
    2.904,
    -1.057,
    -2.976,
    -3.547,
    -2.976,
    -3.547,
    2.57,
    0,
    0,
    1.54,
    0.267,
    1.517,
    0,
    5.14,
    0,
    5.14,
    0,
    2.06,
    0,
    2.06,
    1.233,
    0.524,
    1.233,
    0.524,
    -12.837,
    3.44,
    -12.628,
    6.159,
    -0.071,
    4.089,
    -0.16,
    4.587,
    0.436,
    4.981,
    1.401,
    6.07,
    2.009,
    7.008,
    3.189,
    7.162,
    3.664,
    7.858,
    3.828,
    9.476,
    3.27,
    7.345,
    3.068,
    6.58,
    3.936,
    7.725,
    4.07,
    8.728,
    7.108,
    13.368,
    8.096,
    13.475,
    8.665,
    13.343,
    8.986,
    13.323,
    9.587,
    12.722,
    10.038,
    13.321,
    10.315,
    12.737,
    10.747,
    12.808,
    11.284,
    12.981,
    12.03,
    12.901,
    5.794,
    3.345,
    5.794,
    3.345,
    5.794,
    3.345,
    13.62,
    5.503,
    11.913,
    5.304,
    11.629,
    5.178,
    12.585,
    3.138,
    10.273,
    1.08,
    3.6,
    0,
    3.6,
    0,
    0,
    1.03,
    -1.409,
    3.872,
    -1.409,
    3.872,
    2.57,
    0,
    2.57,
    0,
    0,
    1.54,
    0,
    1.54,
    -1.553,
    -1.398,
    0,
    2.06,
    0,
    2.06,
    0,
    2.06,
    -11.554,
    3.313,
    -12.902,
    2.742,
    -14.38,
    4.672,
    -12.746,
    7.659,
    -0.187,
    5.357,
    -0.093,
    5.349,
    0.095,
    5.439,
    0.929,
    5.867,
    2.098,
    6.458,
    2.334,
    6.779,
    3.048,
    7.18,
    3.38,
    7.962,
    4.033,
    7.585,
    2.733,
    7.508,
    3.124,
    7.733,
    3.53,
    7.93,
    4.224,
    13.001,
    6.779,
    12.75,
    7.6,
    13.164,
    8.219,
    12.656,
    8.965,
    12.803,
    9.051,
    12.926,
    9.416,
    12.96,
    9.863,
    12.624,
    11.462,
    12.73,
    12.818,
    9.659,
    12.817,
    7.4,
    5.794,
    3.345,
    13.757,
    5.007,
    7.576,
    3.216,
    10.265,
    6.666,
    2.367,
    1.986,
    2.367,
    1.986,
    0,
    1.03,
    0,
    1.03,
    -0.625,
    -3.545,
    1.8,
    -3.118,
    4.818,
    -2.35,
    -1.409,
    3.872,
    2.695,
    5.068,
    -0.326,
    -1.679,
    0,
    1.54,
    0,
    1.54,
    -0.351,
    4.015,
    1.233,
    3.212,
    -4.575,
    5.65,
    -8.941,
    2.734,
    -11.564,
    2.248,
    -12.881,
    2.974,
    -13.027,
    5.263,
    -11.516,
    7.196,
    -1.209,
    4.511,
    -0.583,
    4.744,
    -0.088,
    5.029,
    0.482,
    5.509,
    1.519,
    5.67,
    2.237,
    6.146,
    2.516,
    6.554,
    2.828,
    7,
    0,
    1.34,
    0,
    1.34,
    0,
    1.34,
    -0.318,
    0.318,
    -0.318,
    0.318,
    4.992,
    13.005,
    6.659,
    13.653,
    7.277,
    13.686,
    8.203,
    13.128,
    7.947,
    13.226,
    9.194,
    13.131,
    10.137,
    12.081,
    11.82,
    9.918,
    12.547,
    8.148,
    12.514,
    7.225,
    12.56,
    6.962,
    12.857,
    6.551,
    12.457,
    6.076,
    11.845,
    5.524,
    2.367,
    1.986,
    2.367,
    1.986,
    0,
    1.03,
    0,
    1.03,
    1.8,
    -3.118,
    1.8,
    -3.118,
    8.702,
    -3.167,
    0.171,
    1.631,
    4.219,
    5.598,
    6.155,
    2.24,
    1.411,
    -1.227,
    -0.281,
    1.595,
    0.672,
    3.455,
    1.025,
    3.576,
    0.692,
    6.584,
    -1.433,
    3.734,
    -1.607,
    0.585,
    -3.223,
    0.985,
    -8.925,
    3.974,
    -9.128,
    8.815,
    -2.655,
    4.599,
    -1.951,
    4,
    -0.553,
    4.506,
    0.572,
    5.44,
    0,
    6,
    0,
    6,
    1.675,
    6.25,
    3.214,
    3.83,
    3.214,
    3.83,
    0,
    1.34,
    0,
    2.24,
    4.075,
    7.664,
    -0.318,
    0.318,
    -0.318,
    0.318,
    6.47,
    13.876,
    7.493,
    14.092,
    8.375,
    13.938,
    8.671,
    13.352,
    9.364,
    12.427,
    10.149,
    10.51,
    11.812,
    9.229,
    11.855,
    7.996,
    11.797,
    7.957,
    12.266,
    7.37,
    11.975,
    7.195,
    11.486,
    6.902,
    10.706,
    6.433,
    10.758,
    5.963,
    9.563,
    4.664,
    8.074,
    5.866,
    7.357,
    6.861,
    2.11,
    5.798,
    2.11,
    5.798,
    8.702,
    -3.167,
    8.702,
    -3.167,
    4.114,
    2.472,
    4.738,
    3.077,
    2.886,
    0.613,
    3.057,
    2.389,
    2.157,
    3.892,
    2.779,
    4.12,
    3.834,
    5.904,
    4.47,
    5.721,
    5.121,
    1.864,
    4.113,
    1.416,
    3.894,
    1.653,
    6.593,
    3.36,
    -1.912,
    6.254,
    -0.755,
    2.634,
    -0.477,
    3.397,
    0.603,
    4.913,
    0,
    6,
    0,
    6,
    1.299,
    6.685,
    3.214,
    3.83,
    3.214,
    3.83,
    3.022,
    6.48,
    0,
    2.24,
    0,
    2.24,
    4.596,
    3.857,
    1.895,
    1.895,
    6.894,
    5.785,
    6.878,
    13.499,
    7.623,
    12.686,
    8.075,
    11.971,
    9.264,
    10.656,
    10.943,
    9.513,
    11.079,
    8.656,
    11.293,
    8.51,
    11.197,
    8.135,
    11.64,
    7.851,
    11.49,
    7.75,
    11.001,
    7.703,
    10.388,
    7.547,
    10.38,
    6.237,
    9.939,
    6.211,
    9.563,
    6.948,
    7.545,
    7.545,
    2.11,
    5.798,
    2.11,
    5.798,
    8.702,
    -3.167,
    8.702,
    -3.167,
    4.36,
    1.674,
    4.858,
    2.265,
    4.763,
    2.75,
    4.035,
    3.152,
    2.674,
    3.681,
    2.361,
    4.259,
    3.204,
    4.75,
    4.681,
    4.681,
    5.855,
    2.73,
    7.18,
    0.755,
    6.356,
    0.556,
    7.085,
    2.302,
    -0.966,
    6.872,
    0.334,
    3.815,
    -0.872,
    3.255,
    1.089,
    3.797,
    0.41,
    5.866,
    0.467,
    6.684,
    0.198,
    5.667,
    1.999,
    6.153,
    3.081,
    6.607,
    3.952,
    5.644,
    2.035,
    6.656,
    0.89,
    0,
    4.596,
    3.857,
    4.596,
    3.857,
    6.894,
    5.785,
    6.894,
    5.785,
    8.388,
    12.436,
    9.268,
    12.299,
    10.278,
    11.022,
    10.402,
    10.045,
    10.626,
    9.237,
    10.795,
    8.741,
    10.694,
    8.659,
    10.515,
    8.515,
    10.717,
    8.373,
    10.134,
    7.917,
    9.991,
    7.259,
    11.081,
    6.143,
    10.601,
    6.884,
    10.197,
    6.878,
    8.293,
    7.467,
    9.669,
    3.519,
    9.669,
    3.519,
    9.669,
    3.519,
    8.557,
    -0.749,
    5.815,
    1.558,
    4.473,
    1.628,
    3.389,
    3.051,
    2.505,
    4.339,
    2.641,
    4.068,
    2.55,
    3.78,
    2.383,
    3.05,
    2.656,
    3.28,
    4.052,
    3.4,
    5.015,
    2.233,
    5.992,
    2.544,
    6.62,
    2.675
  ]

//canvas ==================================================================================== START
//canvas ==================================================================================== START
//canvas ==================================================================================== START
//canvas ==================================================================================== START
//canvas ==================================================================================== START
//canvas ==================================================================================== START

//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
//canvas 변수 선언 ---------------------------------------------------------------------------- START

var cn = document.getElementById('cw')              // 캔버스 객체
var c = cn.getContext('2d');                        // 캔버스
var a = []                                          // 바람 하나하나 객체의 배열
var cnx;                                            // 캔버스 width
var cny;                                            // 캔버스 height
var grid = []                                       // 위도 경도에 따른 그리드 배열
var currentFrame = 0                                // 애니메이션의 현재 프레임
var animationId                                     // 애니메이션 아이디 (정지시 필요)
var minlat = 31
var maxlat = 44
var minlng = 115
var maxlng = 138
var gap = 0.5
var showWind = false

var speed7 = {
    "dom": document.getElementById('speed7'),
    "color": "",
    "picker": document.getElementById('picker7')
}
var speed5 = {
    "dom": document.getElementById('speed5'),
    "color": "",
    "picker": document.getElementById('picker5')
}
var speed3 = {
    "dom": document.getElementById('speed3'),
    "color": "",
    "picker": document.getElementById('picker3')
}
var speed1 = {
    "dom": document.getElementById('speed1'),
    "color": "",
    "picker": document.getElementById('picker1')
}
var speed0 = {
    "dom": document.getElementById('speed0'),
    "color": "",
    "picker": document.getElementById('picker0')
}



var latgap = (maxlat * 10 - minlat * 10) / 10
var lnggap = (maxlng * 10 - minlng * 10) / 10
var windCount = 500;
var showSpeed = 1

//페이지 로드시 실행
window.onload = function myfunction() {
    init()
    readGrid()
}

//페이지 resize시 실행
window.onresize = () => {
    init();
}


//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END
//canvas 변수 선언 --------------------------------------------------------------------------- END

// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START
// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START

//바람 객체 생성 
function build() {
    a = [];
    for (i = 0; i < windCount; i++) {
        buildobj(i)
    }
}


//바람 객체 생성 (실제 인스턴스 생성)
function buildobj(i) {
    x = getRandomArbitrary(0, cnx)
    y = getRandomArbitrary(0, cny)
    coordinate = map.getProjection()
    point = new kakao.maps.Point(x, y)
    a[i] = new wind(x, y,coordinate.coordsFromContainerPoint(point).Ma, coordinate.coordsFromContainerPoint(point).La, i, currentFrame)
}

//특정 인덱스 바람 객체 삭제
function removeObj(index) {
    buildobj(index)
    return 0;
}

//바람 객체 클래스
function wind(x, y, latitude, longitude, index, frame) {
    this.index = index                              // 객체배열에서 인덱스(삭제시 필요)
    this.x = x;                                     // 화면에서의 x 좌표
    this.y = y;                                     // 화면에서의 y 좌표
    this.latitude = latitude;                       // 지도에서의 위도
    this.longitude = longitude;                     // 지도에서의 경도
    this.frame = frame                              // 생성될 당시 프레임
    this.coordinate = map.getProjection()
    //바람 객체 이동 함수 (현재 좌표의 벡터를 받아 그 벡터 방향으로 이동)    
    this.windMove = function () {
        if (this.x > cnx || this.y > cny || this.x < 0 || this.y < 0) {                 //만약 캔버스 범위를 벗어나면 삭제
            return removeObj(this.index)
        } else {
            if (currentFrame - this.frame > getRandomArbitrary(100, 250)) {             // 100프레임 (1 ~ 2초) 에서 250프레임 (4초정도) 지나면 삭제
                removeObj(this.index)
            }
            const ls = {                                                                // 이동을 위한 현재 위치 기록
                x: this.x,
                y: this.y
            };

            nextVec = getVector(this.latitude, this.longitude)                          // 현재 좌표에서 벡터 계산
            this.x = ls.x + nextVec[0] * showSpeed                                                  // 현재 좌표에서 벡터만큼 이동                                                                                                      
            this.y = ls.y + nextVec[1] * showSpeed                                            // 현재 좌표에서 벡터만큼 이동                                                                                                      

            point = new kakao.maps.Point(this.x, this.y)
            this.latitude = coordinate.coordsFromContainerPoint(point).Ma               // 이동한 만큼 다시 현재 위치 계산
            this.longitude = coordinate.coordsFromContainerPoint(point).La              // 이동한 만큼 다시 현재 위치 계산

            c.beginPath();
            c.lineWidth = 2;
            if (nextVec[2] > 7) {
                c.strokeStyle = speed7.color;
            } else if (nextVec[2] > 5) {
                c.strokeStyle = speed5.color;
            } else if (nextVec[2] > 3) {
                c.strokeStyle = speed3.color;
            } else if (nextVec[2] > 1) {
                c.strokeStyle = speed1.color;
            } else {
                c.strokeStyle = speed0.color;
            }
            c.moveTo(ls.x, ls.y);
            c.lineTo(this.x, this.y);
            c.stroke();
            c.closePath();

            //기록한 현재 위치와 바뀐 위치까지 그림.
        }
    }
}
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END

//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START
//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START

//현재 위도와 경도의 벡터 리턴
function getVector(latitude, longitude) {
    if (latitude <= minlat || latitude >= maxlat) return [0, 0, 0]             // 만약 위도 33 이하, 38 이상이면 1, -1 벡터 리턴
    if (longitude <= minlng || longitude >= maxlng) return [0, 0, 0]         // 만약 경도 124 이하, 130 이상이면 1, -1 벡터 리턴

    gridn = selectGrid(latitude, longitude);                            // 현재 벡터에서 그리드 계산
    g00 = grid[gridn[0]][gridn[1]]
    g10 = grid[gridn[0]][gridn[1] + 1]
    g01 = grid[gridn[0] + 1][gridn[1]]
    g11 = grid[gridn[0] + 1][gridn[1] + 1]
    // 현재 좌표를 감싸는 네(4) 그리드 계산

    return interpolate(latitude, longitude, g00, g10, g01, g11, gridn)      // 4 그리드로 보간값 구해서 리턴
}


//위도와 경도를 가지고 적절한 그리드 리턴 (경도 0.25 단위 , 위도 0.25 단위로 쪼개어져 있음.)
function selectGrid(latitude, longitude) {

    gridlng = Math.floor(((longitude * 10 - minlng * 10) / (gap * 10)))
    gridlat = Math.floor(((maxlat * 10 - latitude * 10) / (gap * 10)))

    return [gridlat, gridlng]
}

//위도 경도. 그리드로 보간값 계산
var interpolate = function (latitude, longitude, g00, g10, g01, g11, gridn) {
    x = (longitude % gap) * (1 / gap)

    d1 = x
    d2 = 1 - x

    var x1_vector_x
    var x1_vector_y
    var x2_vector_x
    var x2_vector_y
    try {
        x1_vector_x = d1 * g10[0] + d2 * g00[0]
        x1_vector_y = d1 * g10[1] + d2 * g00[1]
        x2_vector_x = d1 * g11[0] + d2 * g01[0]
        x2_vector_y = d1 * g11[1] + d2 * g01[1]
    } catch (error) {
        debugger;
    }


    y = (latitude % gap) * (1 / gap)
    d4 = y
    d3 = 1 - y

    result_vector_x = d3 * x2_vector_x + d4 * x1_vector_x
    result_vector_y = d3 * x2_vector_y + d4 * x1_vector_y
    result_vector_scale = Math.sqrt(result_vector_x * result_vector_x + result_vector_y * result_vector_y)

    result_vector = [result_vector_x, result_vector_y, result_vector_scale]
    return result_vector                //보간값 리턴
}

//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END
//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END

// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START
// 애니메이션, 기타 ------------------------------------------------------------------------------- START

//캔버스 초기값 세팅
function init() {
    cn.width = window.innerWidth
    cn.height = window.innerHeight
    cnx = cn.width - 1
    cny = cn.height - 1
    c.linewidth = "1";
    windCount = document.getElementById("range1").value
    showSpeed = document.getElementById("range2").value

    speed7.color = speed7.picker.value
    speed7.dom.style.backgroundColor = speed7.color

    speed5.color = speed5.picker.value
    speed5.dom.style.backgroundColor = speed5.color

    speed3.color = speed3.picker.value
    speed3.dom.style.backgroundColor = speed3.color

    speed1.color = speed1.picker.value
    speed1.dom.style.backgroundColor = speed1.color

    speed0.color = speed0.picker.value
    speed0.dom.style.backgroundColor = speed0.color

}

// 위.경도 그리드값 읽어오기
function readGrid() {
    debugger;
    var count = 0;
    for (i = 0; i < ((latgap * 10) / (gap * 10)) + 1; i++) {
        grid[i] = []
        for (j = 0; j < ((lnggap * 10) / (gap * 10)) + 1; j++) {
            grid[i][j] = []
            grid[i][j][0] = gridData[count++]
            grid[i][j][1] = gridData[count++]
            grid[i][j][2] = count / 2
        }
    }
    alert("준비가 완료되었습니다.")
}

//min, max 랜덤값 리턴
function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}




function writeGridData() {
    i = 0;
    gridData.forEach(data => {
        document.write(data, ',');
        i++;
        if (i == 20) {
            i = 0;
            document.write("<br>")
        }
    })
}


// 애니메이션 생성
function anim() {
    currentFrame++
    animationId = requestAnimationFrame(anim)
    c.fillStyle = "rgba(255, 255, 255, 0.2)"
    c.fillRect(0, 0, cn.width, cn.height);
    a.forEach(function (e, i) {
        e.windMove();
    });
}

//에니메이션 정지
function stopAnim() {
    cancelAnimationFrame(animationId)
}

var windCountDiv = document.getElementById('windCount');
var gauge = document.getElementById('range1')
windCountDiv.innerHTML = gauge.value

var showSpeedDiv = document.getElementById("showSpeed");
var gauge2 = document.getElementById("range2");
showSpeedDiv.innerHTML = gauge2.value

gauge.oninput = function () {
    windCountDiv.innerHTML = this.value
    windCount = this.value
    build()
}


gauge2.oninput = function () {
    showSpeedDiv.innerHTML = this.value
    showSpeed = this.value
    build()
}

document.getElementById('playWind').addEventListener('click',toggleWindLayer)

function toggleWindLayer() {
    if (showWind) {
        a = []
        stopAnim()
        init()
        showWind = !showWind
    } else {
        build()
        anim()
        showWind = !showWind
    }
}

speed7.picker.addEventListener("input", e => {
    speed7.color = e.target.value
    speed7.dom.style.backgroundColor = speed7.color
}, false)

speed5.picker.addEventListener("input", e => {
    speed5.color = e.target.value
    speed5.dom.style.backgroundColor = speed5.color

}, false)

speed3.picker.addEventListener("input", e => {
    speed3.color = e.target.value
    speed3.dom.style.backgroundColor = speed3.color
}, false)

speed1.picker.addEventListener("input", e => {
    speed1.color = e.target.value
    speed1.dom.style.backgroundColor = speed1.color
}, false)

speed0.picker.addEventListener("input", e => {
    speed0.color = e.target.value
    speed0.dom.style.backgroundColor = speed0.color
}, false)


// 애니메이션, 기타 --------------------------------------------------------------------------- END

//canvas ================================================================================== END


//kakao map =============================================================================== START

// 카카오맵 변수 선언 ------------------------------------------------------------------------- START

var container = document.getElementById('map');                 //지도를 그릴 element
var options = {
    center: new kakao.maps.LatLng(37.151198243701934, 128.22723681773422),
    level: 12
};                                                              //지도의 설정 정보

var map = new kakao.maps.Map(container, options);               // container element에 맵 객체 생성

var mapProjection = map.getProjection()
var point;

// 카카오맵 변수 선언 -------------------------------------------------------------------- END

// 카카오맵 이벤트 등록 ------------------------------------------------------------------- START

container.addEventListener('click', e => {
    point = new kakao.maps.Point(e.pageX, e.pageY)
    console.log(point, mapProjection.coordsFromContainerPoint(point))
    var windSpeed = document.getElementById('windSpeed')
    vector = getVector(mapProjection.coordsFromContainerPoint(point).Ma, mapProjection.coordsFromContainerPoint(point).La)
    windSpeed.innerHTML =
        `${mapProjection.coordsFromContainerPoint(point).Ma.toFixed(3)}, ${mapProjection.coordsFromContainerPoint(point).La.toFixed(3)}, 
    vector : ${vector[0].toFixed(3)}, ${vector[1].toFixed(3)} scale: ${vector[2].toFixed(3)}m/s zoomLevel: ${map.getLevel()}`

})
// kakao.maps.event.addListener(map, 'dragend', () => {
//     build()
// })

// kakao.maps.event.addListener(map, 'zoom_changed', () => {
//     build()
// })

// 카카오맵 이벤트 등록 ----------------------------------------------------------------- END


//kakao map ===================================================================== END

