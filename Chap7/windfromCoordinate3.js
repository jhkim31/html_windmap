var gridData = [//2021.01.21.10:40 풍향 데이터
2.804,-1.368,3.236,-1.578,2.178,-2.178,1.97,-2.432,1.539,-3.155,2.613,-1.83,1.294,1.207,0.943,1.51,0.798,0.372,0.429,0.312,-0.597,-0.304,0.12,0.12,-0.517,0.712,-0.339,
0.93,-0.465,1.095,-0.715,0.741,-1.104,0.116,-1.224,-0.679,-2.057,-1.094,-2.09,-0.72,0,1,0,1,0,1,0,1,0.929,-0.626,-0.081,-0.183,1.789,0.062,0.906,-0.588,2.587,-1.376,3.565,
-1.227,2.475,-0.571,2.451,-0.214,1.21,0.417,1.74,0.811,1.861,0.677,4.067,1.09,3.586,0.828,4.751,0.924,4.86,1.673,7.698,2.354,6.239,2.027,2.837,0.551,7.153,-0.5,11.213,0.784,
12.024,1.052,11.845,1.036,12.223,1.069,2.624,-1.28,2.38,-1.793,2.703,-3.002,0.882,-1.359,0.609,-2.124,2.909,0.254,1.683,-0.515,1.771,0.715,1.386,0.8,-0.476,-0.428,0.365,0.562,
0.548,-0.244,-0.012,0.17,0.492,0.307,0.19,-0.003,-0.075,-0.352,-0.803,-0.958,-0.736,-0.909,-0.261,-1.345,-1.016,-0.495,0.108,-1.235,0,1,0,1,0.31,-1.242,-0.634,-0.551,
1.196,-0.837,2.18,0.793,0.84,-0.485,3.072,-0.487,-0.165,-0.408,1.109,-1.275,2.866,-1.1,4.137,1.344,2.467,2.07,0,1.6,0.989,1.646,2.83,2.639,2.915,2.197,2.482,2.397,2.241,
0.559,2.057,-0.513,5.862,-2.019,7.205,-1.401,8.205,0.287,9.567,1.006,10.779,1.324,11.497,1.616,3.229,-2.097,3.36,-2.019,2.949,-1.772,2.605,-1.824,1.946,-1.521,1.923,-0.738,
2.476,-1.051,1.001,0.195,0.388,-0.496,0.911,-0.128,0.878,0.662,1.444,0.441,0.61,-0.78,0.176,-0.511,-0.396,0.106,-0.849,-0.135,-0.423,0.582,0.342,1.119,-0.154,-0.303,-0.018,
-1.03,-0.726,-0.866,-0.513,-1.788,-0.324,-1.403,-0.063,-0.324,-1.041,-0.843,1.271,-1.57,3.779,-2.009,3.627,-1.539,3.69,0.388,2.035,-0.432,1.669,0.416,3.355,2.179,1.333,1.118,
-0.154,0.171,-0.559,2.086,0.554,3.142,-0.092,1.317,1.868,1.459,1.876,0.72,3.635,-0.191,6.285,-0.661,7.805,-1.802,8.789,-0.615,8.866,0.776,9.127,0.478,9.666,0.676,10.918,0.955,
2.388,-2.306,1.281,-1.639,2.04,-0.824,0.966,-0.84,1.085,0.438,1.954,1.269,1.746,0.89,0.544,-0.254,0.029,-0.549,-0.366,-0.133,-1.084,-0.114,0.039,0.559,-0.123,0.252,-1.072,-0.247,
-0.562,1.015,-0.118,0.842,0.275,-0.393,0.374,-1.224,-0.39,-0.263,-0.711,-0.878,-0.706,-1.839,0.405,-2.081,-0.221,-2.53,0.655,-1.405,-0.462,-1.511,1.217,-2.388,3.489,-1.481,2.178,
-0.708,0.915,-1.409,1.531,-0.498,0.923,0.265,1.13,0.792,6.822,3.327,6.685,6.233,4.835,6.905,3.523,5.863,6.355,5.524,7.954,3.88,8.893,1.25,10.566,0.554,8.751,1.386,8.97,0,9.07,0,
10.184,-0.356,10.028,0.175,10.368,0.181,11.178,0.195,1.552,-1.213,1.876,-0.875,2.029,-2.029,2.351,-0.372,1.966,1.592,1.965,-0.311,1.855,-0.603,1.864,-0.606,0.307,-0.286,0.139,
-0.343,-0.621,-1.332,-0.58,-0.58,-0.268,1.689,-0.884,0.884,0.457,1.408,0.655,1.134,-1.732,-1,-1.732,-1,-1.732,-1,-0.84,-0.465,-0.57,-1.655,-0.557,-1.532,-0.843,-1.348,-0.866,
-0.629,-0.119,-1.365,0.046,-2.63,1.485,-2.914,-0.191,-1.083,1.009,-0.053,0.511,0.176,0.863,-0.863,3.88,-0.684,2.562,1.249,2.382,1.547,4.106,1.914,4.844,2.363,5.072,0.894,7.69,
2.205,8.493,2.76,9.378,1.318,10.07,0,9.329,-0.163,9.387,-0.492,10.026,-0.701,10.669,-0.933,10.873,-0.38,11.278,0.197,1.898,-1.281,2.254,-0.732,2.061,-0.71,1.61,2.789,0.952,2.138,
0.998,1.425,0.636,0.534,1.716,-0.12,-0.505,0.455,-0.155,0.069,-0.365,-0.246,-0.545,1.224,-0.082,1.568,-0.081,0.381,-0.599,1.176,0.023,-1.31,-1.732,-1,-1.732,-1,-1.732,-1,-0.153,
-1.452,-0.75,-1.299,-0.334,-1.163,-0.254,-0.832,-0.061,-0.577,-0.789,-0.662,-2.086,-0.759,-0.851,-0.293,0.881,-0.356,1.806,-0.222,-0.738,-0.498,2.243,1.192,-2.34,0.041,-2.996,4.613,
-1.381,2.048,-0.306,0.17,1.178,0.476,3.013,0.64,5.126,0.812,6.356,0.222,6.983,-1.106,7.839,-1.382,7.99,-1.266,8.238,-1.012,8.377,-1.029,9.158,-0.64,9.799,-0.171,10.19,0,-0.17,2.434,
3.132,0.552,1.778,1.245,0.644,0.6,-0.045,1.279,0.247,0.644,0.748,0.722,1.491,-0.344,0.787,-0.436,0.057,0.213,0.433,0.498,-0.202,1.274,0.21,1.495,0.814,0.528,0.853,-1.365,-0.828,
-2.049,-1.046,-1.55,-1.485,-1.65,-0.598,-0.712,-0.413,-0.475,-0.447,-0.615,-0.3,-0.923,-0.847,0.638,-0.285,-0.705,-0.942,-0.71,0.284,-0.875,0.028,-0.106,1.064,1.182,0.39,0.766,
-0.73,1.264,-0.831,5.245,-6.684,-0.467,-7.803,1.097,-3.636,0.318,-2.013,-1.63,-0.516,-0.971,0.612,0.247,1.874,1.171,3.029,1.477,4.347,1.165,5.114,0.994,5.836,0.717,6.531,0.802,
7.1,0.372,8.069,-0.141,9.267,-0.486,10.195,-0.713,1.112,1.037,2.06,1.553,0.347,1.97,0.347,1.97,0.347,1.97,0.667,0.385,0.079,0.756,0.554,0.684,0.29,0.01,1.152,-0.203,-0.433,0.498,
-0.272,0.837,0.644,0.274,1.555,-3.664,1.426,-0.2,-1.005,-1.383,-2.596,-2.421,-0.35,0.148,-0.081,0.926,-0.841,0.611,-0.527,1.243,-0.374,-1.087,0,-1.66,-0.276,-0.566,-0.641,-0.196,
0.31,1.457,0.127,0.348,-0.085,0.695,0.407,0.307,-0.362,4.134,-0.217,6.216,-2.857,1.097,-2.745,-1.585,-0.312,-2.541,0.322,-1.659,-0.142,0.218,0.894,0.724,0.962,0.649,1.757,1.056,
2.927,1.974,3.988,2.69,4.172,2.607,4.682,1.892,5.068,1.55,6.187,1.428,7.378,1.169,8.516,1.046,2.606,0.137,1.299,1.788,0.347,1.97,0.347,1.97,0.347,1.97,-0.394,0.308,-0.087,0.996,
0.349,1.075,0.656,0.364,0.314,-1.096,-0.146,0.329,1.091,0.252,-0.287,-3.277,-0.706,-3.06,-2.455,-2.926,-1.141,-0.829,-1.302,0.981,-1.532,1.073,-1.207,0.669,-0.523,0.72,-1.325,
0.258,-0.729,0.755,-0.959,1.476,0.634,-0.812,2.505,-0.352,-0.592,-1.213,-1.251,-0.154,-2.233,1.622,-3.065,2.395,-2.83,3.035,-1.032,2.689,4.227,-0.444,5.891,-2.747,5.357,-2.613,
4.16,0,3.231,1.371,3.052,1.834,3.416,2.304,2.81,3.013,2.411,3.859,1.67,4.35,1.021,4.095,1.481,3.489,5.898,1.254,9.009,-1.915,9.924,-3.809,10.485,-4.45,0.752,0.998,-0.509,-0.754,
-0.628,0.122,-0.446,1.103,-0.174,-0.985,-0.174,-0.985,1.059,0.449,0.646,0.419,1.294,0.906,1.352,1.306,2.487,1.678,1.909,1.909,-3.746,-3.033,0,1,-2.928,0.102,-4.114,3.452,-5.402,
3.376,-6.327,-1.695,-4.948,-1.899,-4.529,-0.963,-4.376,0.46,-1.559,0.9,-1.542,-0.162,-0.031,0.126,2.177,0.114,2.06,0.289,3.624,2.633,4.382,2.53,6.798,2.341,8.046,2.307,8.719,
0.61,8.377,-1.029,7.46,-1.45,6.98,0,5.916,0.207,2.991,1.395,2.363,3.252,3.364,3.137,4.631,1.778,6.133,-1.304,6.471,-3.156,6.455,-4.52,7.062,-4.586,7.514,-4.695,8.289,-4.98,
8.885,-5.13,8.983,-5.398,0.038,-0.729,0.156,0.454,0.139,1.323,0.025,1.43,-0.174,-0.985,-0.174,-0.985,-0.174,-0.985,0.072,1.368,0.572,2.135,0.479,3.022,0.69,3.247,0.934,
1.914,0,1,0,1,0,1,-1.48,-1.587,-1.563,-2.502,-2.623,-4.732,-4.467,-4.625,-4.571,-3.201,-2.664,-1.357,-1.442,-1.298,-1.218,-0.281,-0.78,-0.703,0.931,-2.092,0.799,-3.459,
3.947,-2.011,1.285,-2.318,2.373,-2.545,2.958,-2.572,4.759,-0.083,4.435,0.702,4.382,0.773,3.261,1.452,3.642,2.744,3.748,2.342,3.94,1.672,5.019,-0.088,6.013,-3.197,5.886,
-3.97,5.885,-3.678,6.052,-3.355,6.249,-3.755,6.375,-4.3,6.733,-4.715,7.047,-4.753,6.753,-5.276,0,1,0.556,0.89,0.17,0.965,0.063,0.717,-0.019,1.07,0.582,1.306,0.418,1.812,
0.1,2.858,-0.133,3.818,-0.274,3.92,1.043,2.139,1.514,0.706,0,1,0,1,0,1,-1.235,-2.322,-2.251,-3.746,-4.248,-5.437,-4.532,-7.543,-3.743,-6.752,-2.72,-2.449,-1.099,-1.31,
-2.031,-1.035,-0.974,-0.335,-0.162,-0.763,0.117,-1.676,2.031,-1.422,0.662,0.789,0.662,0.789,2.678,-1.806,3.561,0.249,3.571,1.3,3.369,1.945,3.19,1.488,3.833,1.245,4.355,
1.006,5.101,-0.899,6.052,-3.636,5.882,-4.273,5.923,-3.559,5.636,-3.66,5.759,-3.325,5.541,-4.487,5.742,-4.327,5.996,-3.894,4.586,-4.276,3.472,-4.444,0,1,0.221,0.547,0.012,
0.69,-0.387,0.911,-0.275,1.414,0.373,1.617,0.214,2.451,-0.105,2.998,0,2.92,0.976,-0.261,0.793,-1.32,0.704,-0.229,-0.215,-0.56,0.738,-0.479,0,-2.57,-1.31,-4.888,-2.505,
-5.627,-2.942,-5.774,-5.072,-6.044,-6.651,-5.989,-5.3,-2.938,-2.576,-1.147,-1.699,0.059,-0.789,-0.662,-0.789,-0.662,-0.541,-0.865,0.662,0.789,0.662,0.789,0.662,0.789,
2.572,-1.545,3.809,0.74,4,1.377,3.951,1.059,3.891,0.616,3.441,-0.362,5.307,-1.724,6.435,-3.139,6.375,-4.632,5.996,-4.199,5.661,-3.676,5.033,-4.223,5.412,-3.932,5.145,
-4.166,4.593,-4.283,2.199,-5.443,0.984,-1.637,1.409,-4.337,-0.157,1.119,-0.337,1.037,-0.241,1.043,-0.028,1.6,-0.239,1.703,-0.31,1.956,0.095,1.808,0.13,1.484,0.559,
0.039,0.369,-1.598,0.363,-1.186,0.46,-0.865,0.467,-0.228,1.111,-0.426,-0.363,-2.585,-1.111,-4.813,-2.028,-5.891,-3.234,-5.834,-2.734,-5.864,-3.948,-5.239,-4.943,
-4.297,-4.808,-3.243,-1.334,0.77,-1.334,0.77,0,-1.54,0,-1.54,-0.092,-0.522,0.662,0.789,0.662,0.789,4.057,-1.087,3.265,0.875,1.563,0.831,1.539,-0.054,3.986,-2.395,
5.689,-2.415,6.308,-2.941,6.236,-3.457,5.8,-4.061,5.676,-3.146,5.546,-3.332,4.779,-3.87,4.57,-4.115,5.215,-3.93,1.936,-0.705,1.936,-0.705,1.936,-0.705,-0.781,
-2.035,-0.198,0.796,-0.334,1.163,-0.057,1.629,0.028,1.61,0.221,1.393,-0.017,0.96,0.694,0.604,1.192,0.634,1.21,-0.417,0.595,-1.167,0.815,0.614,0.268,-0.297,
-0.573,-1.494,-0.59,-2.057,-0.455,-3.238,0.312,-4.459,-0.606,-5.768,-2.376,-5.597,-2.542,-5.71,-3.064,-6.014,-3.035,-5.475,-3.149,-4.497,-1.334,0.77,-1.334,
0.77,0,-1.54,0.515,-0.892,0.515,-0.892,0.672,0.155,2.057,-0.108,0.955,-0.1,0.591,-0.445,3.648,-0.91,6.96,-3.246,6.54,-3.332,6.166,-3.418,6.289,-3.486,5.785,
-3.34,5.484,-3.04,5.737,-2.675,5.724,-3.305,5.458,-3.025,3.93,-4.521,5.146,-4.02,1.936,-0.705,1.936,-0.705,1.334,-0.77,0.496,1.363,0.028,1.61,0.136,1.554,0.595,
1.635,0.366,1.005,1.068,-0.568,0.583,-1.251,0.837,-1.196,0.069,0.098,0.63,-0.255,1.198,-0.389,1.97,-0.347,1.97,-0.347,1.97,-0.347,0.387,-2.753,0.924,-3.022,0.735,
-4.642,-0.425,-4.861,-1.888,-4.673,-3.355,-5.166,-3.36,-5.175,-3.45,-5.521,-3.052,-4.885,-3.272,-3.899,-2.571,-0.316,0.515,-0.892,0.515,-0.892,0.515,-0.892,-0.479,
0.174,1.851,0.427,3.359,-3.359,7.214,-4.165,7.966,-3.715,7.975,-3.551,6.913,-3.676,6.516,-3.465,5.649,-3.394,5.387,-3.11,5.8,-2.705,5.629,-3.797,5.501,-3.997,4.119,
-4.266,2.971,-3.3,3.54,-5.451,0.812,-0.432,1.334,-0.77,1.334,-0.77,0.527,1.447,0.508,1.142,1.015,1.689,1.033,0.93,0.136,-1.112,-0.505,-0.471,0.464,-1.041,0.965,-0.9,
0.83,-0.441,1.755,-0.674,0.917,-0.743,1.97,-0.347,1.97,-0.347,1.97,-0.347,1.555,-3.664,1.973,-4.431,1.74,-5.354,-0.669,-4.763,-1.038,-5.889,-2.542,-4.99,-3.409,-5.25,
-3.147,-5.237,-3.556,-5.079,-4.173,-3.379,-5.22,-1.302,-1.709,0.06,-0.376,-1.627,-0.479,0.174,-0.479,0.174,-0.479,0.174,3.344,-1.559,4.305,-2.007,4.622,-2.155,5.878,
-2.867,6.308,-2.941,6.317,-3.219,6.579,-3.209,2.415,-0.879,2.415,-0.879,-1.8,-3.118,0.358,-2.029,0.358,-2.029,1.632,-5.022,0.908,-2.638,-0.631,-0.458,0.139,0.655,0.527,
1.447,0.527,1.447,1.526,0.991,1.688,0.936,0.977,-0.587,0.274,-1.556,0.817,-1.258,0.276,-0.719,0.789,-0.474,1.504,-0.132,0.818,-1.086,-0.394,-1.375,1.957,-0.674,2.828,
-1.319,2.021,-3.111,2.309,-3.424,1.572,-4.567,0.754,-6.144,0.384,-7.32,0.963,-6.853,-1.336,-5.788,-3.961,-6.592,-3.612,-6.516,-3.956,-5.445,-2.531,-0.446,-2.531,-0.446,
-1.736,-0.773,-0.724,-0.675,-0.344,-0.241,-0.479,0.174,0,2.06,0,2.06,3.527,-0.309,4.706,-1.087,4.745,-1.727,5.229,-2.113,5.293,-5.481,-2.904,1.057,-2.904,1.057,2.415,
-0.879,-1.8,-3.118,0.358,-2.029,0.358,-2.029,0.358,-2.029,-1.482,-1.431,1.246,0.405,0.811,0.413,1.399,-0.172,1.55,-0.564,2.243,0.275,1.515,-0.772,1.064,-1.141,1.21,-0.816,
0.724,-1.115,0.855,-0.436,0.205,0.887,-0.034,0.328,-0.714,-0.714,-0.194,0.417,1.263,0.133,1.541,-0.718,2.655,-1.238,1.4,-2.155,0.155,-2.956,-2.082,-5.424,-2.068,-5.118,0,
-5.17,0.738,-4.662,-3.779,-4.347,-4.594,-6.561,-4.143,-5.303,-2.531,-0.446,-2.531,-0.446,-2.531,-0.446,-0.5,-0.35,-1.331,1.9,0,2.06,0,2.06,0,2.06,5.031,0.44,4.533,-0.718,
3.444,-4.741,-0.715,-4.057,-0.715,-4.057,-2.904,1.057,-2.904,1.057,0,1.03,0,1.03,0.358,-2.029,-2.676,1.545,-1.324,1.578,1.076,-0.435,0,5.14,0,5.14,1.267,0.436,-1.334,0.77,
1.84,0,1.042,-0.531,1.658,-1.118,1.854,-1.028,0.092,-1.758,-0.64,-1.969,-0.908,-1.782,-1.625,-0.864,-0.758,0.338,-0.223,1.816,-0.605,2.846,1.941,2.313,-0.206,-1.959,-0.884,
-4.157,-2.706,-5.31,-3.969,-4.566,-3.261,-3.751,-2.012,-3.63,-1.524,-3.59,-5.343,-4.174,-5.974,-4.502,-6.674,-4.849,-2.531,-0.446,-2.531,-0.446,-2.578,1.739,-4.096,2.56,
-3.326,2.693,-2.315,1.447,0,0.51,0,0.51,0,0.51,0.242,-4.614,-4.057,0.715,-0.715,-4.057,-0.715,-4.057,-1.578,-1.324,-1.578,-1.324,0,1.03,0,1.03,1.447,0.527,-1.285,2.226,0,
1.03,0,1.03,0,5.14,0,2.24,3.072,-0.597,-1.334,0.77,1.298,-0.498,1.148,-0.351,0.913,-0.794,0.711,-1.183,-0.812,-1.25,-0.504,-0.91,-1.326,-0.563,-1.51,0.803,-0.765,1.64,
-0.573,1.077,-0.318,0.98,-1.749,-0.502,-2.341,-2.424,-2.222,-2.467,-1.199,-2.967,-4.155,-4.615,-2.87,-4.971,-0.902,-4.245,-0.884,-5.013,-3.599,-4.776,-5.408,-5.8,-6.151,
-5.736,-5.872,-3.122,1.54,0,-4.938,-0.96,-4.355,-1.006,-3.215,0.742,-4.018,0.422,0,0.51,0,0.51,0,1.03,0,1.03,-1.03,1.784,-4.057,0.715,0,0.51,0,1.03,0,1.03,1.545,2.676,
-0.705,1.936,1.447,0.527,1.447,0.527,0,1.03,0,1.03,0,2.24,0,2.24,3.357,2.439,5.112,0.537,0.165,-0.353,0.352,-0.142,0.028,0.399,-0.893,-0.958,-0.831,-0.177,-1.64,0.26,
-1.416,1.029,-1.213,1.552,-0.588,0.941,-0.506,0.671,-0.563,0.089,-1.999,-0.611,-2.256,-1.465,-0.925,-2.685,-1.434,-4.413,-4.237,-6.525,-3.239,-6.092,-2.168,-6.297,
-0.399,-5.706,-5.308,-7.305,-5.456,-6.738,-4.858,-5.395,1.54,0,1.54,0,1.54,0,-4.643,0.903,-5.265,2.021,-4.684,3.403,-3.903,1.988,-3.65,1.257,0,1.03,0,1.03,-1.03,1.784,
0,0.51,0,0.51,0,1.03,0,1.03,1.545,2.676,1.545,2.676,-1.723,1.252,0,1.03,0,1.03,0,1.03,2.958,-0.103,2.026,0.658,3.486,-0.49,3.668,-0.914,-0.988,0.548,-0.552,0.234,-0.179,
0.019,-0.405,-0.483,-0.779,0.041,-1.158,0.59,-1.394,0.271,-1.098,-0.058,-1.228,0.173,-1.215,0.516,-0.496,0.763,-1.105,-0.235,-1.952,-1.952,-0.832,-3.605,-3.35,-5.158,
-4.101,-4.101,-4.716,-4.716,-3.373,-4.817,-5.132,-5.7,-6.03,-5.242,-6.06,-4.403,-5.768,-3.33,-5.998,-1.607,1.54,0,-5.387,0.95,-6.02,2.555,-5.19,5.19,-2.758,-2.314,-2.758,
-2.314,-2.029,-0.358,-2.029,-0.358,0,1.03,0,0.51,0,0.51,0,0.51,-0.331,-1.555,-0.408,-0.453,1.545,2.676,1.545,2.676,-0.993,2.457,-0.509,2.885,1.882,-2.019,3.809,0.4,3.259,
0.633,3.919,1.426,4.164,0.364,2.667,-1.54,-1.349,-0.336,-0.331,1.018,-0.179,0.666,-0.679,-0.441,-0.593,0.289,-1.149,0.69,-1.913,-0.167,0.318,0.318,-1.316,1.271,-0.442,1.094,
-0.65,0.375,-1.191,-0.41,-0.263,-0.437,-0.04,-2.27,-2.706,-5.31,-4.015,-5.526,-4.109,-5.655,-3.713,-4.928,-5.098,-4.59,-6.052,-3.636,-5.755,-2.562,-5.776,-1.548,-5.917,-0.518,
-5.476,0.965,-5.72,1.64,-2.983,-0.634,-3.744,-6.232,-2.758,-2.314,-2.758,-2.314,-2.029,-0.358,-2.029,-0.358,0,0.51,0,0.51,3.6,0,1.23,0.627,-2.795,-0.443,-3.034,2.37,0.165,
0.936,1.506,-4.925,0.52,-4.238,0.841,-3.644,1.348,-1.726,1.683,0.547,1.741,1.681,2.004,1.066,3.022,-0.642,2.532,0.631,-0.376,0.98,-0.152,1.079,-0.453,0.408,-0.731,1.17,
3,0,3,0,-1.177,0.794,0.94,-0.342,0.94,-0.342,-0.358,1.682,-0.444,1.158,-0.629,0.777,1.114,-1.426,0.323,-4.619,-2.484,-6.147,-4.523,-5.024,-5.155,-4.326,-4.14,-4.287,-5.24,
-4.094,-4.78,-3.104,-5.578,-2.368,-4.979,-1.428,-4.182,-0.813,-2.41,-3.317,-2.579,-5.061,-4.457,-6.365,-5.517,-6.347,-5.682,-6.772,-5.856,-6.979,-5.629,-6.475,-3.548,
-2.393,-1.517,-0.267,-1.517,-0.267,3.6,0,3.6,0,1.023,-4.104,1.289,-3.744,-0.956,-4.918,-1.204,-4.492,-1.403,-3.305,-1.919,-2.37,-1.23,-1.273,-0.225,-0.39,0.698,-0.371,
1.561,-1.507,1.601,0.887,0.675,2.209,-1.01,1.749,-0.387,0.619,-0.195,0.482,0.715,-0.088,3,0,3,0,0.059,0.557,0.94,-0.342,0.94,-0.342,0.94,-0.342,-0.177,1.681,1.857,
-0.294,0,-2,0,-2,-0.695,-3.939,-3.679,-5.455,-5.2,-4.52,-4.181,-3.386,-5.811,-3.355,-4.41,-2.756,-5.9,-2.505,-4.348,-1.936,-2.178,-2.506,-2.342,-3.606,-3.844,-4.581,
-5.793,-5.999,-7.281,-5.689,-8.663,-5.844,-8.608,-6.254,-7.585,-5.311,-6.062,-3.5,-1.517,-0.267,-1.517,-0.267,3.6,0,3.6,0,-1.956,-4.394,-1.968,-3.551,-2.251,-3.099,
-2.216,-2.066,-2.611,-2.27,-2.136,-1.857,-1.911,-0.477,-1.381,-0.503,-0.729,-0.128,-0.122,1.164,-0.34,2.416,-0.089,2.548,0.083,1.187,-0.055,0.346,0.654,-0.589,-0.61,
-0.021,0.025,1.46,0.675,1.169,-0.383,0.289,0.505,0.646,0.6,-0.01,1.739,0.925,0.775,1.342,1.649,-0.058,0,-2,0,-2,-0.695,-3.939,-0.695,-3.939,-4.054,-4.664,-4.888,
-3.683,-5.359,-2.85,-4.869,-2.925,-5.728,-1.751,-3.86,-0.681,-3.005,-1.735,-3.064,-3.524,-4.124,-3.714,-6.422,-4.497,-7.037,-4.228,-7.761,-4.127,-7.941,-4.585,
-6.593,-4.79,-9.766,-2.8,-3.872,-1.409,-3.872,-1.409,-3.872,-1.409,-2.943,-2.65,-3.522,-2.466,-2.734,-1.776,-2.766,-2.161,-2.267,-2.114,-2.644,-0.859,-3.157,
-1.34,-3.086,-0.769,-2.949,0.258,-2.494,1.44,-2.057,1.607,-1.542,1.904,-1.264,1.874
]

//canvas ==================================================================================== START
//canvas 변수 선언 ---------------------------------------------------------------------------- START
var cn = document.getElementById('cw')              // 캔버스 객체
var c = cn.getContext('2d');                        // 캔버스
var a = []                                          // 바람 하나하나 객체의 배열
var cnx;                                            // 캔버스 width
var cny;                                            // 캔버스 height
var grid = []                                       // 위도 경도에 따른 그리드 배열
var currentFrame = 0                                // 애니메이션의 현재 프레임
var animationId                                     // 애니메이션 아이디 (정지시 필요)
var minlat = 31
var maxlat = 44
var minlng = 115
var maxlng = 138
var gap = 0.5
var latgap = maxlat - minlat
var lnggap = maxlng - minlng
var windCount = 500;

//페이지 로드시 실행
window.onload = function myfunction() {
    init()
    readGrid()
    build();
}

//페이지 resize시 실행
window.onresize = () => {
    init();
    build();
}


//canvas 변수 선언 --------------------------------------------------------------------------- END

// 바람 객체 빌드 관련 -------------------------------------------------------------------------- START

//바람 객체 생성 
function build() {
    a = [];
    for (i = 0; i < windCount; i++) {
        buildobj(i)
    }
}

//바람 객체 생성 (실제 인스턴스 생성)
function buildobj(i) {
    x = getRandomArbitrary(0, cnx)
    y = getRandomArbitrary(0, cny)
    coordinate = map.getProjection()
    point = new kakao.maps.Point(x, y)
    a[i] = new ob(x, y, coordinate.coordsFromContainerPoint(point).La, coordinate.coordsFromContainerPoint(point).Ma, i, currentFrame)
}

//특정 인덱스 바람 객체 삭제
function removeObj(index) {
    buildobj(index)
    return 0;
}

//바람 객체 클래스
function ob(x, y, latitude, longitude, index, frame) {
    this.index = index                              // 객체배열에서 인덱스(삭제시 필요)
    this.x = x;                                     // 화면에서의 x 좌표
    this.y = y;                                     // 화면에서의 y 좌표
    this.latitude = latitude;                       // 지도에서의 위도
    this.longitude = longitude;                     // 지도에서의 경도
    this.frame = frame                              // 생성될 당시 프레임
    this.coordinate = map.getProjection()
    //바람 객체 이동 함수 (현재 좌표의 벡터를 받아 그 벡터 방향으로 이동)
    this.dr = function () {
        if (this.x > cnx || this.y > cny || this.x < 0 || this.y < 0) {                 //만약 캔버스 범위를 벗어나면 삭제
            return removeObj(this.index)
        } else {
            if (currentFrame - this.frame > getRandomArbitrary(100, 250)) {             // 100프레임 (1 ~ 2초) 에서 250프레임 (4초정도) 지나면 삭제
                removeObj(this.index)
            }
            const ls = {                                                                // 이동을 위한 현재 위치 기록
                x: this.x,
                y: this.y
            };

            nextVec = getVector(this.latitude, this.longitude)                          // 현재 좌표에서 벡터 계산
            this.x = ls.x + nextVec[0]                                                  // 현재 좌표에서 벡터만큼 이동                                                                                                      
            this.y = ls.y + nextVec[1]                                                  // 현재 좌표에서 벡터만큼 이동                                                                                                      

            point = new kakao.maps.Point(this.x, this.y)
            this.latitude = coordinate.coordsFromContainerPoint(point).Ma               // 이동한 만큼 다시 현재 위치 계산
            this.longitude = coordinate.coordsFromContainerPoint(point).La              // 이동한 만큼 다시 현재 위치 계산

            c.beginPath();
            c.lineWidth = 2;
            if (nextVec[2] > 7) {
                c.strokeStyle = "rgb(255,0,0)";
            } else if (nextVec[2] > 5) {
                c.strokeStyle = "rgb(255,70,0)";
            } else if (nextVec[2] > 3) {
                c.strokeStyle = "rgb(255, 100, 0)";
            } else if (nextVec[2] > 1) {
                c.strokeStyle = "rgb(255, 140, 0)";
            } else {
                c.strokeStyle = "rgb(255,180,0)";
            }
            // c.strokeStyle = "rgb(255,0,0)";
            c.moveTo(ls.x, ls.y);
            c.lineTo(this.x, this.y);
            c.stroke();
            c.closePath();

            //기록한 현재 위치와 바뀐 위치까지 그림.
        }
    }
}
// 바람 객체 빌드 관련 ----------------------------------------------------------------------------------- END

//벡터 획득 알고리즘 (bilinear interpolation) ------------------------------------------------------------ START

//현재 위도와 경도의 벡터 리턴
function getVector(latitude, longitude) {
    if (latitude <= minlat || latitude >= maxlat) return [0,0,0]             // 만약 위도 33 이하, 38 이상이면 1, -1 벡터 리턴
    if (longitude <= minlng || longitude >= maxlng) return [0,0,0]         // 만약 경도 124 이하, 130 이상이면 1, -1 벡터 리턴

    gridn = selectGrid(latitude, longitude);                            // 현재 벡터에서 그리드 계산
    g00 = grid[gridn[0]][gridn[1]]
    g10 = grid[gridn[0]][gridn[1] + 1]
    g01 = grid[gridn[0] + 1][gridn[1]]
    g11 = grid[gridn[0] + 1][gridn[1] + 1]
    // 현재 좌표를 감싸는 네(4) 그리드 계산

    return interpolate(latitude, longitude, g00, g10, g01, g11, gridn)      // 4 그리드로 보간값 구해서 리턴
}


//위도와 경도를 가지고 적절한 그리드 리턴 (경도 0.25 단위 , 위도 0.25 단위로 쪼개어져 있음.)
function selectGrid(latitude, longitude) {
    gridlng = parseInt((longitude - minlng) / gap)         //ex) 
    gridlat = parseInt((maxlat - latitude) / gap)           //ex) 

    return [gridlat, gridlng]
}

//위도 경도. 그리드로 보간값 계산
var interpolate = function (latitude, longitude, g00, g10, g01, g11, gridn) {
    x = (longitude % gap) * (1 / gap)

    d1 = x
    d2 = 1 - x

    let x1_vector_x = d1 * g10[0] + d2 * g00[0]
    let x1_vector_y = d1 * g10[1] + d2 * g00[1]
    let x2_vector_x
    let x2_vector_y
    try {
        x2_vector_x = d1 * g11[0] + d2 * g01[0]
        x2_vector_y = d1 * g11[1] + d2 * g01[1]
    } catch (error) {
        debugger;
    }


    y = (latitude % gap) * (1 / gap)
    d4 = y
    d3 = 1 - y

    result_vector_x = d3 * x2_vector_x + d4 * x1_vector_x
    result_vector_y = d3 * x2_vector_y + d4 * x1_vector_y
    result_vector_scale = Math.sqrt(result_vector_x * result_vector_x + result_vector_y * result_vector_y)

    result_vector = [result_vector_x, result_vector_y, result_vector_scale]
    return result_vector                //보간값 리턴
}

//벡터 획득 알고리즘 (bilinear interpolation) ----------------------------------------------------- END

// 애니메이션, 기타 ------------------------------------------------------------------------------- START

//캔버스 초기값 세팅
function init() {
    cn.width = window.innerWidth
    cn.height = window.innerHeight
    cnx = cn.width - 1
    cny = cn.height - 1
    c.linewidth = "1";
    windCount = document.getElementById("range1").value
}

// 위.경도 그리드값 읽어오기
function readGrid() {
    debugger;
    var count = 0;
    for (i = 0; i < ((latgap / gap) + 1); i++) {
        grid[i] = []
        for (j = 0; j < ((lnggap / gap) + 1); j++) {
            grid[i][j] = []
            grid[i][j][0] = gridData[count++]
            grid[i][j][1] = gridData[count++]
            grid[i][j][2] = count / 2
        }
    }
    alert("준비가 완료되었습니다.")
}

//min, max 랜덤값 리턴
function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}

// 애니메이션 생성
function anim() {
    currentFrame++
    animationId = requestAnimationFrame(anim)
    c.fillStyle = "rgba(255, 255, 255, 0.2)"
    c.fillRect(0, 0, cn.width, cn.height);
    a.forEach(function (e, i) {
        e.dr();
    });
}

//에니메이션 정지
function stopAnim() {
    cancelAnimationFrame(animationId)
}

var windCountDiv = document.getElementById('windCount');
var gauge = document.getElementById('range1')
windCountDiv.innerHTML = gauge.value

gauge.oninput = function () {
    windCountDiv.innerHTML = this.value
    windCount = this.value
    build()
}

document.getElementById('playWind').addEventListener('click', e =>{
    anim()
})

document.getElementById('stopWind').addEventListener('click', e =>{
    stopAnim()
})
// 애니메이션, 기타 --------------------------------------------------------------------------- END

//canvas ================================================================================== END


//kakao map =============================================================================== START

// 카카오맵 변수 선언 ------------------------------------------------------------------------- START

var container = document.getElementById('map');                 //지도를 그릴 element
var options = {
    center: new kakao.maps.LatLng(37.151198243701934, 128.22723681773422),
    level: 12
};                                                              //지도의 설정 정보

var map = new kakao.maps.Map(container, options);               // container element에 맵 객체 생성

var mapProjection = map.getProjection()
var point;

// 카카오맵 변수 선언 -------------------------------------------------------------------- END

// 카카오맵 이벤트 등록 ------------------------------------------------------------------- START

container.addEventListener('click', e => {
    point = new kakao.maps.Point(e.pageX, e.pageY)
    console.log(point, mapProjection.coordsFromContainerPoint(point))
    var windSpeed = document.getElementById('windSpeed')
    vector = getVector(mapProjection.coordsFromContainerPoint(point).Ma, mapProjection.coordsFromContainerPoint(point).La)
    windSpeed.innerHTML =
        `${mapProjection.coordsFromContainerPoint(point).Ma.toFixed(3)}, ${mapProjection.coordsFromContainerPoint(point).La.toFixed(3)}, 
    vector : ${vector[0].toFixed(3)}, ${vector[1].toFixed(3)} scale: ${vector[2].toFixed(3)}`

})
kakao.maps.event.addListener(map, 'dragend', () => {
    build()
})

kakao.maps.event.addListener(map, 'zoom_changed', () => {
    build()
})

// 카카오맵 이벤트 등록 ----------------------------------------------------------------- END


//kakao map ===================================================================== END

