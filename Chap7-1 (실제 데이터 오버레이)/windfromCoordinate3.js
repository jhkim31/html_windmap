var gridData =
    [
        3.145, -1.603, 2.995, -2.697, 2.543, -2.824, 3.657, -2.657, 4.297, -3.238, 5.583, -2.143, 4.055, 1.24, 1.314, 2.103, 2.115, 0.148, 1.638, 0.696, 1.553, -0.691, 3.551, 0.885, 4.244, 0.371, 4.735, -1.093, 4.404, -1.017, 3.761, -2.085, 3.463, -2.516, 3.056, -3.165, 3.39, -3.51, 4.037, -3.765, 4.596,
        -3.857, 4.596, -3.857, 4.596, -3.857, 4.596, -3.857, 1.488, -2.685, -0.294, -1.857, 2.397, 0.126, 0.981, -1.845, 2.782, -3.435, 3.384, -1.367, 2.83, -0.049, 3.488, -0.122, 2.963, -0.207, 3.132, -0.219, 0.684, 1.879, 1.627, -1.057, 1.989, 0.351, 2.633, 1.064, 2.718, 1.385, 6.277, 2.04, 5.162,
        2.98, 7.093, 4.095, 12.188, 4.197, 10.947, 5.339, 11.711, 5.712, 10.222, 6.895, 10.147, 6.845, 2.491, -2.165, 1.87, -2.67, 3.496, -3.376, 2.917, -0.892, 0.864, -2.25, 4.893, 0.256, 3.748, -2.342, 2.406, 0.338, 2.638, -0.092, 3.665, -1.334, 2.699, -0.623, 4.214, -0.369, 3.917, -0.761, 3.79,
        -0.875, 3.477, -1.405, 3.49, -2.354, 3.538, -2.666, 3.149, -3.623, 3.663, -4.523, 4.695, -4.695, 5.319, -4.008, 4.596, -3.857, 4.596, -3.857, 1.77, -3.192, 0.66, -2.463, 3.125, -2.623, 2.287, 0.878, 1.407, -1.139, 4.258, -0.598, -0.629, -1.183, 2.458, -0.751, 4.278, 0.525, 5.209, 2, 0.684,
        1.879, 0.684, 1.879, 0.684, 1.879, 0.684, 1.879, 2.588, 2.096, 2.483, 3.681, 3.369, 1.945, 2.329, -0.081, 9.06, 5.444, 9.622, 5.555, 13.415, 8.06, 13.423, 7.75, 13.337, 7.7, 12.286, 8.287, 3.317, -2.783, 3.797, -2.019, 3.2, -1.561, 4.124, -1.923, 3.831, -1.952, 2.914, -1.485, 4.412,
        -0.778, 6.993, 1.108, 4.564, 0.239, 7.109, 0.124, 6.015, -0.953, 5.741, -1.012, 5.909, 0.103, 5.748, 0.503, 4.549, 0.079, 4.117, -1.58, 3.457, -3.005, 2.889, -3.833, 3.031, -4.851, 4.448, -5.301, 4.981, -4.33, 4.564, -4.256, 2.038, -3.832, 1.916, -1.916, 0.125, -0.891, 2.457, -1.721, 4.206,
        -2.052, 5.742, -2.09, 5.575, 0.784, 4.028, 0.71, 3.806, 1.775, 3.026, 1.677, 1.469, -0.051, 0.684, 1.879, 0.684, 1.879, 0.684, 1.879, 1.016, 2.393, 2.784, 2.688, 2.655, 1.238, 4.316, -0.684, 8.388, 2.726, 7.99, 2.751, 9.318, 6.051, 11.847, 7.991, 12.328, 8.006, 13.522, 7.495, 13.363,
        7.715, 2.475, -2.475, 1.471, -1.883, 2.2, -0.934, 0.413, -1.201, 1.345, -0.118, 3.931, 1.668, 2.956, 0.155, 2.719, -1.268, 2.318, -1.285, 2.979, -3.426, 6.018, -1.612, 6.015, -0.421, 5.096, 0.807, 6.176, 0.54, 3.338, -0.649, 1.831, -2.261, 1.538, -3.299, 2.6, -4.503, 3.246, -4.636, 3.092,
        -4.415, 2.546, -3.378, 2.963, -4.562, 1.395, -4.562, 3.015, -2.442, 1.037, -2.33, 2.33, -4.036, 5.228, -2.219, 4.67, 0, 2.768, -0.538, 2.826, -0.81, 2.142, -0.187, 1.907, 1.49, 8.467, 4.502, 6.847, 5.544, 3.893, 3.041, 5.342, 5.532, 9.306, 8.089, 8.732, 4.643, 12.793, 4.405, 10.475,
        4.021, 8.41, 3.061, 8.944, 4.756, 10.072, 5.815, 10.907, 6.046, 11.267, 6.505, 12.051, 7.53, 13.025, 7.52, 2.513, -2.108, 3.175, -1.76, 1.58, -2.851, 2.009, -0.211, 1.887, 1.64, 1.452, -0.23, 2.296, -1.221, 3.044, -1.902, 2.314, -0.708, 0.627, -0.673, 2.708, 0.095, 2.059, -0.072, 0.925,
        -1.602, 0.789, -1.618, 1.115, -1.077, 1.062, -2.384, -0.684, -1.879, -0.684, -1.879, -0.684, -1.879, 1.341, -2.75, 0.73, -2.724, 0, -3.58, -0.315, -2.994, 0.85, -1.598, 0.986, -2.567, 1.156, -3.357, 5.643, -1.618, 0.404, 1.172, 1.996, -2.851, 2.095, 0.146, 0.566, -0.252, 2.66, -1.298, 6.197,
        4.502, 8.955, 8.063, 9.941, 9.6, 6.676, 5.406, 7.771, 7.771, 11.278, 8.194, 12.157, 6.739, 12.183, 4.922, 11.886, 6.056, 10.878, 5.784, 10.768, 5.252, 10.089, 5.825, 10.728, 6.703, 11.982, 6.642, 12.762, 5.682, 1.646, -1.961, 1.996, -1.017, 1.894, -0.883, 1.543, 1.002, 0.518, 1.503, 0.75,
        1.299, 0.719, 0.695, 3.082, 0.544, 2.103, -1.894, 1.48, 0.026, 1.966, -0.418, 2.321, -0.845, 1.525, -1.029, 1.515, -1.227, 2.11, -2.904, 2.533, -3.9, -0.684, -1.879, -0.684, -1.879, -0.684, -1.879, 0.219, -2.5, -0.717, -2.206, -0.251, -2.387, 1.245, -2.553, 0.346, -2.183, 1.494, -1.253, -0.379,
        0.02, 0.486, -1.334, 2.241, -0.772, 4.801, 1.468, -1.91, -0.658, 1.061, -1.061, 2.192, -2.612, 4.326, -1.836, 5.938, 2.045, 7.342, 9.743, 7.888, 10.857, 6.418, 6.882, 8.71, 8.123, 11.108, 7.778, 12.228, 7.06, 12.251, 5.975, 11.885, 5.292, 12.28, 5.726, 11.628, 5.925, 11.316, 5.766, 11.433,
        5.576, 11.65, 6.458, -0.47, 0.672, 2.149, 0.075, 1.238, 0.899, 0.458, -0.106, -0.212, 1.201, -0.189, 0.972, 0.569, 1.279, 2.115, -0.527, 2.689, -0.621, 3.25, -0.573, 2.883, 0.202, 1.956, -0.416, 1.19, -0.897, 2.325, -1.816, 2.751, -3.279, 3.312, -5.3, 1.833, -5.323, -0.336, -3.192, -1.215,
        -2.104, -0.462, -1.511, 0.541, -1.664, 0.058, -1.649, 0.347, -0.271, 0.736, -0.425, 2.69, -0.235, 1.065, -0.615, 1.406, 1.059, 2.203, 2.362, 0.746, 0.145, 0.52, -1.428, 1.996, -5.2, 2.502, -4.513, 3.913, -3.779, 5.087, -3.562, 6.419, 5.387, 5.827, 10.513, 8.332, 10.289, 9.291, 7.259, 9.166,
        6.66, 9.997, 6.492, 11.099, 6.152, 12.425, 5.794, 12.79, 5.694, 12.388, 5.515, 12.619, 6.155, 12.358, 6.297, 11.909, 5.553, 0.725, 0.089, 1.769, 0.507, 0, 1, 0, 1, 0, 1, 0.897, -0.078, 0.084, 0.594, 0.834, 0.834, 0.419, -0.941, 3.065, -1.301, 1.236, 0.657, 2.52,
        -0.044, 3.299, -2.061, 3.706, -3.221, 3.113, -5.854, 3.31, -4.727, 0.21, -2.401, -0.515, -1.922, -0.734, -1.049, -0.699, -1.648, -0.09, -0.156, 0.794, -1.017, 0.84, -1.648, 0.703, -1.268, 2.755, 0.29, 2.931, 2.209, 0.115, -1.094, 0.993, 1.367, 0.998, -0.212, 2.008, -1.745, 3.278, -2.561, 3.585,
        -2.801, 2.32, -4.018, 1.505, -4.135, 2.525, 0.772, 3.985, 8.17, 6.286, 8.978, 9.46, 8.518, 10.412, 7.565, 10.312, 6.196, 10.202, 5.89, 10.688, 5.924, 11.684, 5.699, 12.933, 6.031, 13.196, 6.153, 12.996, 6.06, 12.915, 6.022, 2.14, 0, 0.269, -0.019, 0, 1, 0, 1, 0,
        1, 2.843, -2.843, 2.843, -2.843, 1.3, -0.16, 2.007, 0.105, 4.363, -0.769, 6.609, -4.292, 8.017, -4.263, 7.994, -4.431, 5.492, -4.945, 4.086, -3.946, 1.724, -2.129, 0.528, -1.626, -1.777, -0.218, -2.605, -1.385, -1.202, -2.26, -0.973, -1.443, -0.723, -1.032, -0.182, 0.251, 2.54, 0.222, 3.758,
        -0.131, -0.345, -0.853, 1.859, -0.789, 2.639, -0.807, 3.885, -0.34, 4.885, -0.861, 3.081, -0.826, 1.353, -1.671, 2.196, -1.909, -0.156, -1.783, 0.617, 1.454, 3.122, 5.633, 5.581, 7.97, 7.759, 8.035, 9.74, 7.61, 10.961, 7.118, 11.1, 6.67, 10.635, 5.895, 10.732, 5.949, 11.501, 6.375, 12.37,
        6.577, 13.113, 6.396, 13.356, 5.946, 0.28, -0.227, -0.742, -0.742, -1.021, 0.352, 1.646, -1.153, 1.5, -2.598, 1.5, -2.598, 2.843, -2.843, 4.186, -0.89, 4.861, -0.425, 4.516, -0.635, 6.219, -1.783, 8.233, -3.327, 7.523, -3.669, 3.759, -1.368, 6.193, -2.254, 3.712, -1.351, 0.894, 1.104, 4.357,
        -0.612, 5.28, -2.807, -5.303, -2.586, -3.937, -1.279, -1.903, -0.582, 0.636, -0.785, 2.219, -0.678, 4.107, 0.143, 5.957, -1.266, 8.556, -1.051, 8.409, -0.147, 7.45, 0, 7.04, -0.369, 5.907, -0.621, 4.714, -0.247, 1.806, 0.126, 2.014, 0.693, 0.526, 2.984, 1.385, 5.168, 4.215, 7.301, 6.397,
        8.187, 8.39, 7.554, 9.442, 7.646, 10.315, 7.494, 10.878, 7.064, 11.406, 7.407, 11.297, 6.788, 11.51, 6.38, 12.251, 5.975, 12.616, 5.883, -0.923, -0.411, -0.051, 0.12, 1.652, -2.359, 2.77, -3.077, 1.5, -2.598, 1.5, -2.598, 1.5, -2.598, 6.08, -3.949, 6.534, -3.187, 6.578, -2.929, 6.044,
        -3.35, 6.377, -3.985, 3.759, -1.368, 3.759, -1.368, 3.759, -1.368, 6.54, -3.93, 6.691, -3.709, 6.624, -3.231, 6.797, -3.17, 5.762, -2.446, -2.402, -3.699, -1.198, -1.917, 0, -1.09, 1.896, -0.3, 2.228, -3.066, 2.685, -4.135, 5.106, -3.989, 4.603, -0.729, 5.967, -1.488, 8.198, 1.007, 7.343,
        1.427, 5.783, 1.442, 4.774, 1.19, 1.712, 2.739, 2.537, 3.247, 3.883, 4.795, 3.872, 5.963, 4.439, 6.835, 6.169, 6.852, 7.569, 6.351, 8.964, 6.513, 9.787, 7.647, 10.08, 7.324, 11.154, 7.244, 11.949, 7.18, 11.982, 6.642, 12.035, 6.399, 0.643, -0.766, 1.555, -2.305, 2.411, -3.859, 3.229,
        -4.612, 4.14, -4.762, 4.877, -4.71, 4.856, -4.528, 5.061, -4.557, 5.301, -4.448, 5.147, -4.474, 5.767, -5.192, 6.493, -5.073, 3.759, -1.368, 3.759, -1.368, 3.759, -1.368, 6.616, -4.462, 6.901, -3.825, 6.516, -3.612, 6.481, -3.446, 6.371, -2.971, 3.028, -2.823, -0.277, -1.971, 0.383, -0.902, 2.124,
        -0.49, 1.54, 0, 1.54, 0, 3.433, -1.116, 5.574, -0.983, 5.574, -0.983, 4.879, -1.68, 6.251, -0.328, 6.092, 2.461, 5.326, 2.952, 3.676, 2.977, 3.46, 4.429, 5.185, 4.507, 4.438, 4.286, 6.549, 3.935, 7.2, 4.499, 7.82, 3.482, 7.452, 2.712, 7.216, 4, 8.531, 5.331, 9.566,
        5.748, 10.921, 6.305, 11.917, 6.88, 12.438, 6.338, 0.643, -0.766, 1.891, -4.455, 2.638, -5.177, 3.26, -5.426, 3.843, -5.488, 4.349, -5.37, 4.31, -4.958, 3.275, -4.192, 2.782, -3.973, 3.31, -5.733, 4.244, -6.292, 6.032, -6.032, 5.977, -4.032, 5.729, -4.476, 5.789, -5.032, 5.454, -4.577, 5.167,
        -3.894, 5.447, -3.814, 5.762, -3.742, 5.788, -2.823, 2.882, -1.344, 0.995, -1.872, 1.004, -0.842, 1.18, 0.99, 1.54, 0, 1.54, 0, 5.574, -0.983, 5.574, -0.983, 5.574, -0.983, 4.054, -2.436, 4.228, -0.519, 5.291, 1.221, 4.958, 4.015, 5.671, 4.12, 5.256, 4.106, 5.681, 3.28, 4.44,
        3.109, 5.389, 3.635, 6.154, 2.87, 6.255, 2.401, 6.652, 3.102, 6.357, 3.38, 7.449, 4.476, 8.743, 5.253, 9.827, 5.225, 11.19, 5.458, 12.071, 5.887, 1.638, -4.266, 2.218, -5.779, 2.329, -6.399, 2.739, -6.453, 3.564, -5.932, 2.613, -4.181, 1.794, -3.236, 1.547, -3.173, 1.462, -4.498, 1.118,
        -6.342, 2.803, -5.271, 1.096, -3.586, 3.376, -3.496, 3.571, -3.697, 3.031, -3.487, 3.811, -3.811, 5.217, -4.076, 6.002, -3.465, 5.907, -3.01, 5.81, -2.587, 5.133, -1.472, 2.103, -1.314, 0.662, 0.789, 0.662, 0.789, 0.892, -0.515, 0.479, 0.174, 4.351, -1.584, 4.351, -1.584, 4.351, -1.584, 3.05,
        -2.216, 3.7, -0.389, 4.343, 0.38, 4.451, 2.57, 4.41, 4.112, 6.013, 4.21, 6.326, 4.267, 5.77, 3.747, 3.272, 2.649, 4.481, 1.72, 5.565, 2.595, 6.112, 3.114, 5.835, 3.646, 6.282, 4.079, 3.043, 0.537, 3.043, 0.537, 3.043, 0.537, 11.937, 6.347, 1.996, -6.144, 1.832, -6.839, 1.735,
        -6.957, 2.146, -7.019, 2.814, -5.77, 0, -0.89, 0, -0.89, 0, -0.89, 0.601, -3.407, 0.315, -4.509, 1.122, -3.912, 2.915, -4.013, 3.106, -2.797, 2.747, -2.388, 4.021, -2.712, 4.837, -2.681, 5.92, -2.636, 6.287, -1.803, 5.294, -2.139, 5.488, -1.783, 4.914, -0.867, 3.815, -0.334, 0.662,
        0.789, 1.936, 0.705, 2.551, 0.45, 1.54, 0, 1.54, 0, 4.351, -1.584, 4.351, -1.584, 1.892, -1.588, 2.707, -1.094, 3.072, 0.998, 4.027, 2.052, 4.444, 2.777, 4.44, 3.346, 5.051, 4.091, 6.776, 4.401, 7.036, 4.57, 3.128, 1.526, 4.656, 2.271, 4.828, 2.676, 5.558, 4.038, 5.112,
        3.579, 3.043, 0.537, -0.358, -2.029, -0.358, -2.029, 5.077, 1.079, 1.832, -6.839, 1.349, -6.94, 0.751, -7.141, 0.55, -7.871, 0, -4.6, 0.094, -5.389, 0, -0.89, 0, -0.89, 1.659, -4.558, 2.443, -5.238, 0.695, -3.939, 0.695, -3.939, 0.695, -3.939, 5.497, -3.707, 6.041, -3.078, 5.966,
        -2.29, 5.94, -1.592, 5.937, -0.624, 5.298, -1.321, 4.763, -0.669, 4.347, 0.152, 3.337, 0.469, 0.411, -0.267, 0.529, -0.587, 1.54, 0, 1.54, 0, 2.06, 0, 2.06, 0, 3.9, 0.688, 6.503, 1.988, 6.491, 1.618, 5.459, 0.095, 3.82, 0.882, 3.885, 1.57, 3.496, 1.705, 5.431,
        2.305, 5.393, 3.502, 5.952, 4.015, 6.386, 2.451, 5.05, 2.685, 4.667, 4.202, 4.585, 3.713, 4.451, 2.57, 4.451, 2.57, -0.358, -2.029, -0.358, -2.029, -0.438, -0.381, 1.403, -6.602, 0.229, -6.546, -0.457, -6.534, -0.61, -5.808, -0.659, -4.158, 0.067, -3.839, 0.531, -3.014, 0.864, -3.742, 3.322,
        -4.924, 1.702, -3.341, 0.695, -3.939, 0.695, -3.939, 0.695, -3.939, 5.054, -3.539, 5.312, -2.591, 5.288, -1.617, 4.973, -0.523, 5.123, 0.268, 4.469, -0.313, 4.323, 0.378, 3.537, 1.014, 2.44, 1.353, 1.174, 1.557, -1.64, -1.584, 0.668, 0.717, 2.06, 0, 2.06, 0, 4.057, 0.715, 4.057,
        0.715, 6.194, 1.204, 6.18, 3.713, 4.839, 2.573, 4.045, 1.973, 4.008, 1.149, 3.913, 0.832, 3.65, 1.401, 3.638, -4.336, 3.638, -4.336, 0.527, -1.447, 1.285, -2.226, 1.285, -2.226, 6.691, 4.181, 4.451, 2.57, 4.451, 2.57, 1.758, 4.83, 0, 1.03, 0, 1.03, 0.74, -6.025, -0.406,
        -5.806, -0.882, -5.571, -1.309, -5.249, -1.214, -4.871, -1.064, -3.481, 0.057, -3.24, 0.991, -3.699, 1.229, -3.202, 1.927, -2.752, 3.636, -5.193, 3.638, -5.008, 3.674, -4.08, 4.017, -3.027, 4.422, -2.157, 4.22, -1.21, 4.07, 0, 3.829, 0.402, 3.335, 0.709, 3.044, 1.687, 2.425, 1.963, 1.509,
        2.512, 1.334, -0.77, 0, 2.29, 0.748, 2.302, 1.294, 0.975, 1.014, -0.179, 1.014, -0.179, 4.902, 2.83, 4.902, 2.83, 5.299, 5.683, 5.645, 4.907, 4.997, 3.499, 4.903, 2.286, 5.576, 1.084, -0.625, -3.545, -0.625, -3.545, 3.638, -4.336, 0.527, -1.447, 1.285, -2.226, 1.285, -2.226, 3.502,
        -0.744, 1.763, -0.311, 1.758, 4.83, 1.758, 4.83, 3.883, 1.04, 3.883, 1.04, -0.093, -5.349, -1.096, -5.155, -1.544, -5.049, -1.944, -4.812, -2.38, -4.477, -2.363, -3.782, -0.597, -3.388, -0.51, -3.22, 0.441, -3.139, 1.236, -2.777, 1.506, -4.925, 1.872, -4.409, 2.32, -4.018, 2.59, -3.087, 2.712,
        -2.275, 2.637, -1.23, 2.537, -0.133, 2.202, 1.027, 1.997, 1.862, 1.705, 2.837, 1.165, 2.884, 0.578, 3.279, 1.334, -0.77, 1.334, -0.77, 1.334, -0.77, 1.646, 2.265, 1.014, -0.179, 1.014, -0.179, 4.902, 2.83, 4.902, 2.83, 4.838, 5.373, 4.726, 5.068, 5.225, 4.082, 4.057, 0.715, 4.057,
        0.715, -0.625, -3.545, -0.625, -3.545, 2.367, -1.986, 2.367, -1.986, 1.285, -2.226, 2.531, 0.446, 2.226, 1.285, 0.249, -1.773, 4.902, 2.83, 4.902, 2.83, 5.467, 5.279, 7.127, 4.115, -1.351, -5.042, -2.098, -4.943, -2.209, -4.961, -2.249, -4.611, -2.355, -4.079, -1.915, -3.455, -1.619, -3.471, -1.529,
        -3.435, -1.136, -3.12, -0.214, -3.063, -0.259, -3.711, -0.304, -4.349, 0.061, -3.509, 0.505, -2.866, 0.566, -1.645, 0.472, -0.489, 0.461, 0.43, 0.319, 1.384, 0.532, 2.504, 0.229, 3.282, 0.06, 3.429, -0.205, 3.905, 1.334, -0.77, 1.334, -0.77, 2.407, 3.707, 2.392, 3.416, 1.828, 2.516, 2.723,
        3.132, 4.726, 3.966, 4.726, 3.966, 4.726, 3.966, 4.543, 3.949, 0.705, 1.936, 4.057, 0.715, 0, 1.54, 0, 1.54, 0, 1.03, 2.367, -1.986, 2.367, -1.986, 2.83, 4.902, 0, 3.6, 1.986, 2.367, 1.986, 2.367, 4.902, 2.83, 0, 5.81, 1.601, 5.585, 7.127, 4.115, -2.324,
        -4.562, -2.708, -4.334, -2.774, -4.112, -2.369, -3.791, -2.623, -3.888, -2.041, -3.682, -2.3, -3.681, -1.847, -3.961, -1.737, -3.725, -1.61, -3.453, -1.512, -3.101, -1.847, -3.961, -1.485, -3.334, -1.428, -2.04, -1.283, -0.833, -1.417, -0.099, -0.8, 0.648, -1.155, 1.778, -0.593, 2.788, -0.896, 3.342, -0.819,
        3.854, -1.118, 4.173, 0.095, 5.429, -0.705, 1.936, 3.9, 6.755, 4.669, 6.668, 3.472, 4.608, 1.353, 2.655, 4.726, 3.966, 4.726, 3.966, 2.976, 3.547, 2.976, 3.547, 4.726, 3.966, 0.705, 1.936, 0, 1.54, 0, 1.54, -2.676, -1.545, 0, 2.06, 4.56, -0.804, 2.83, 4.902, 2.83,
        4.902, 3.167, 8.702, 3.167, 8.702, 0, 5.81, 0, 5.81, 9.321, 10.352, 10.536, 10.536, -2.364, -3.934, -3.152, -4.035, -2.832, -3.497, -2.976, -3.547, -2.777, -3.554, -2.894, -3.704, -3.078, -3.94, -4.009, -4.95, -2.604, -3.584, -1.916, -3.189, -2.13, -3.279, -2.772, -2.87, -2.791, -2.695, -2.492,
        -1.878, -2.265, -1.105, -2.035, -0.432, -1.72, 0.876, -2.374, 2.292, -2.157, 3.452, -2.029, 3.983, -1.554, 4.784, -1.455, 5.429, -0.705, 1.936, -0.705, 1.936, -0.705, 1.936, 4.331, 8.5, 2.86, 7.45, 1.486, 3.047, 1.142, 3.139, 0.871, 0.185, 0.871, 0.185, 2.976, 3.547, 4.726, 3.966, 3.568,
        2.06, 3.568, 2.06, -2.676, -1.545, -2.676, -1.545, 0, 2.06, 0, 2.06, -0.86, 1.431, 3.167, 8.702, 3.167, 8.702, 3.167, 8.702, 3.623, 2.353, 4.712, 8.501, 7.924, 11.747, 9.294, 10.322, -2.768, -3.674, -3.566, -3.961, -3.191, -3.94, -2.952, -3.057, -2.98, -3.196, -3.118, -3.118, -3.302,
        -3.302, -3.986, -3.717, -3.82, -3.689, -2.848, -2.949, -2.762, -2.667, -2.873, -2.41, -3.152, -2.463, -3.206, -1.926, -2.941, -1.013, -2.849, 0.35, -3.047, 1.553, -3.042, 2.837, -2.865, 3.802, -2.71, 4.694, -2.392, 5.13, -1.521, 6.587, -1.055, 8.595, -0.705, 1.936, 0.641, 9.168, 2.514, 8.767, 2.639,
        8.122, -2.11, 5.798, -2.11, 5.798, 0.625, 3.545, 0.625, 3.545, 1.936, 0.705, 1.969, 1.652, -0.116, -0.435, 3.568, 2.06, 5.045, 8.073, 2.524, 1.902, 0, 2.06, 0, 2.06, 2.355, 2.616, 0.941, 6.694, 5.484, 10.763, 6.542, 8.681, 7.469, 6.725, 1.202, 4.822, 4.547, 10.213, 7.712,
        10.614, -3.196, -2.877, -4.251, -3.442, -3.352, -3.352, -3.493, -3.145, -3.543, -2.574, -3.793, -2.656, -3.926, -2.454, 0, -0.89, -1.34, 0, -1.34, 0, -1.34, 0, 0, 0.45, 0, 0.45, -3.703, -1.806, -3.969, -0.989, -3.858, 0.135, -4.024, 1.545, -3.694, 2.587, -3.606, 3.606, -2.744,
        4.95, -2.827, 6.063, -1.271, 7.209, -0.147, 8.419, 1.131, 0.457, -0.401, 7.659, 0.459, 8.758, 1.37, 8.652, -2.11, 5.798, -2.11, 5.798, 0.625, 3.545, 0.625, 3.545, 1.969, 1.652, 1.969, 1.652, 3.545, 0.625, 1.05, 4.211, 5.366, 10.092, 4.755, 6.545, 5.332, 4.972, 3.42, 2.672, 2.501,
        3.572, 0.405, 3.849, 3.677, 7.885, 5.027, 9.07, 5.395, 9.344, 8.669, 8.669, 2.922, 7.232, 5.825, 9.695, -0.953, -0.55, -3.594, -1.38, -4.009, -3.021, -3.204, -2.328, -2.819, -1.026, -2.819, -1.026, -5.04, -1.735, -3.759, -1.368, -3.759, -1.368, -1.34, 0, -3.935, -2.459, -3.77, -2.09, 0,
        0.45, 0, 0.45, -4.577, -0.16, -4.727, 0.834, -4.976, 1.91, -4.328, 2.81, -3.767, 4.184, -3.456, 5.123, -2.863, 5.869, -2.354, 6.836, -2.501, 5.618, -0.135, 2.566, -2.34, 8.161, -1.443, 8.184, -0.731, 8.358, -0.25, 7.166, -0.654, 6.226, -2.087, 7.277, -0.945, 5.966, 2.315, 4.01, 2.315,
        4.01, 3.545, 0.625, 3.545, 0.625, 2.45, 8.546, 4.953, 9.315, 3.175, 5.499, 5.279, 5.863, 1.416, 3.505, 2.459, 5.042, 1.848, 6.044, 4.186, 8.215, 3.867, 8.293, 5.774, 9.609, 7.611, 9.07, 4.707, 7.835, 0.394, -0.256, -0.707, 0.062, -0.884, -0.287, -3.449, -1.255, -2.819, -1.026, -2.819,
        -1.026, -5.906, -0.725, -3.759, -1.368, -3.759, -1.368, 0, -2.68, 0, -2.68, -3.489, -1.481, -3.759, -1.368, 0, 1.34, -5, 0, -5.22, 1.302, -5.284, 2.243, -5.066, 3.29, -4.407, 3.968, -4.336, 4.816, -3.435, 5.717, -2.809, 6.618, -3.28, 5.249, -3.769, 3.052, -2.633, 6.518, -2.197,
        7.661, -1.986, 7.966, -0.829, 6.749, -1.791, 6.684, -1.525, 7.843, 0.284, 8.135, 2.315, 4.01, 2.315, 4.01, 3.545, 0.625, 3.545, 0.625, 0.817, 6.65, 2.371, 8.848, 3.99, 8.556, 3.759, 7.378, 4.309, 5.718, 2.794, 5.991, 1.217, 5.271, 2.424, 7.928, 3.447, 8.981, 3.43, 9.425, 5.665,
        9.429, 6.476, 9.248, 0.59, -0.57, -0.011, -0.63, 0.276, -0.499, -0.9, -0.191, -1.665, 2.884, -2.633, 1.011, -3.618, -0.126, -5.181, -0.636, -5.934, -1.37, 0, -2.68, 0, -2.68, -4.072, -2.075, -3.759, -1.368, -3.759, -1.368, -5, 0, -5, 0, -5.527, 2.122, -5.267, 3.42, -5.186,
        4.352, -4.443, 4.934, -3.826, 5.464, -3.07, 5.774, -1.275, 5.525, -1.238, 3.402, -2.461, 7.148, -2.386, 7.803, -2.073, 8.315, -1.476, 6.945, -1.805, 7.238, -1.441, 8.174, 1.105, 9.002, 4.451, 2.57, 4.451, 2.57, 4.451, 2.57, -1.902, 2.524, -0.199, 5.707, 0.826, 7.857, 2.233, 8.956, 1.946,
        7.264, 3.516, 7.54, 1.374, 6.466, 0.753, 6.134, 1.069, 7.605, 2.585, 9.017, 2.264, 9.082, 3.9, 9.652, 4.599, 9.428,
    ]

var cn = document.getElementById('windmap')              // 캔버스 객체
var c = cn.getContext('2d');                        // 캔버스
var a = []                                          // 바람 하나하나 객체의 배열
var cnx;                                            // 캔버스 width
var cny;                                            // 캔버스 height
var grid = []                                       // 위도 경도에 따른 그리드 배열
var currentFrame = 0                                // 애니메이션의 현재 프레임
var animationId                                     // 애니메이션 아이디 (정지시 필요)
var minlat = 31
var maxlat = 44
var minlng = 115
var maxlng = 138
var gap = 0.5
var showWind = false

var speed7 = {
    "dom": document.getElementById('speed7'),
    "color": "",
    "picker": document.getElementById('picker7')
}
var speed5 = {
    "dom": document.getElementById('speed5'),
    "color": "",
    "picker": document.getElementById('picker5')
}
var speed3 = {
    "dom": document.getElementById('speed3'),
    "color": "",
    "picker": document.getElementById('picker3')
}
var speed1 = {
    "dom": document.getElementById('speed1'),
    "color": "",
    "picker": document.getElementById('picker1')
}
var speed0 = {
    "dom": document.getElementById('speed0'),
    "color": "",
    "picker": document.getElementById('picker0')
}



var latgap = (maxlat * 10 - minlat * 10) / 10
var lnggap = (maxlng * 10 - minlng * 10) / 10
var windCount = 500;
var showSpeed = 1

//페이지 로드시 실행
window.onload = function myfunction() {
    init()
    readGrid()
}

//페이지 resize시 실행
window.onresize = () => {
    init();
}
 
function build() {
    a = [];
    for (i = 0; i < windCount; i++) {
        buildobj(i)
    }
}


//바람 객체 생성 (실제 인스턴스 생성)
function buildobj(i) {
    x = getRandomArbitrary(0, cnx)
    y = getRandomArbitrary(0, cny)
    coordinate = map.getProjection()
    point = new kakao.maps.Point(x, y)
    a[i] = new wind(x, y, coordinate.coordsFromContainerPoint(point).Ma, coordinate.coordsFromContainerPoint(point).La, i, currentFrame)
}

//특정 인덱스 바람 객체 삭제
function removeObj(index) {
    buildobj(index)
    return 0;
}

//바람 객체 클래스
function wind(x, y, latitude, longitude, index, frame) {
    this.index = index                              // 객체배열에서 인덱스(삭제시 필요)
    this.x = x;                                     // 화면에서의 x 좌표
    this.y = y;                                     // 화면에서의 y 좌표
    this.latitude = latitude;                       // 지도에서의 위도
    this.longitude = longitude;                     // 지도에서의 경도
    this.frame = frame                              // 생성될 당시 프레임
    this.coordinate = map.getProjection()
    //바람 객체 이동 함수 (현재 좌표의 벡터를 받아 그 벡터 방향으로 이동)    
    this.windMove = function () {
        if (this.x > cnx || this.y > cny || this.x < 0 || this.y < 0) {                 //만약 캔버스 범위를 벗어나면 삭제
            return removeObj(this.index)
        } else {
            if (currentFrame - this.frame > getRandomArbitrary(100, 250)) {             // 100프레임 (1 ~ 2초) 에서 250프레임 (4초정도) 지나면 삭제
                removeObj(this.index)
            }
            const ls = {                                                                // 이동을 위한 현재 위치 기록
                x: this.x,
                y: this.y
            };

            nextVec = getVector(this.latitude, this.longitude)                          // 현재 좌표에서 벡터 계산
            this.x = ls.x + nextVec[0] * showSpeed                                                  // 현재 좌표에서 벡터만큼 이동                                                                                                      
            this.y = ls.y + nextVec[1] * showSpeed                                            // 현재 좌표에서 벡터만큼 이동                                                                                                      

            point = new kakao.maps.Point(this.x, this.y)
            this.latitude = coordinate.coordsFromContainerPoint(point).Ma               // 이동한 만큼 다시 현재 위치 계산
            this.longitude = coordinate.coordsFromContainerPoint(point).La              // 이동한 만큼 다시 현재 위치 계산

            c.beginPath();
            c.lineWidth = 2;
            // if (nextVec[2] > 7) {
            //     c.strokeStyle = speed7.color;
            // } else if (nextVec[2] > 5) {
            //     c.strokeStyle = speed5.color;
            // } else if (nextVec[2] > 3) {
            //     c.strokeStyle = speed3.color;
            // } else if (nextVec[2] > 1) {
            //     c.strokeStyle = speed1.color;
            // } else {
            //     c.strokeStyle = speed0.color;
            // }
            c.moveTo(ls.x, ls.y);
            c.lineTo(this.x, this.y);
            c.stroke();
            c.closePath();

            //기록한 현재 위치와 바뀐 위치까지 그림.
        }
    }
}

function getVector(latitude, longitude) {
    if (latitude <= minlat || latitude >= maxlat) return [0, 0, 0]             // 만약 위도 33 이하, 38 이상이면 1, -1 벡터 리턴
    if (longitude <= minlng || longitude >= maxlng) return [0, 0, 0]         // 만약 경도 124 이하, 130 이상이면 1, -1 벡터 리턴

    gridn = selectGrid(latitude, longitude);                            // 현재 벡터에서 그리드 계산
    g00 = grid[gridn[0]][gridn[1]]
    g10 = grid[gridn[0]][gridn[1] + 1]
    g01 = grid[gridn[0] + 1][gridn[1]]
    g11 = grid[gridn[0] + 1][gridn[1] + 1]
    // 현재 좌표를 감싸는 네(4) 그리드 계산

    return interpolate(latitude, longitude, g00, g10, g01, g11, gridn)      // 4 그리드로 보간값 구해서 리턴
}


//위도와 경도를 가지고 적절한 그리드 리턴 (경도 0.25 단위 , 위도 0.25 단위로 쪼개어져 있음.)
function selectGrid(latitude, longitude) {

    gridlng = Math.floor(((longitude * 10 - minlng * 10) / (gap * 10)))
    gridlat = Math.floor(((maxlat * 10 - latitude * 10) / (gap * 10)))

    return [gridlat, gridlng]
}

//위도 경도. 그리드로 보간값 계산
var interpolate = function (latitude, longitude, g00, g10, g01, g11, gridn) {
    x = (longitude % gap) * (1 / gap)

    d1 = x
    d2 = 1 - x

    var x1_vector_x
    var x1_vector_y
    var x2_vector_x
    var x2_vector_y
    try {
        x1_vector_x = d1 * g10[0] + d2 * g00[0]
        x1_vector_y = d1 * g10[1] + d2 * g00[1]
        x2_vector_x = d1 * g11[0] + d2 * g01[0]
        x2_vector_y = d1 * g11[1] + d2 * g01[1]
    } catch (error) {
        debugger;
    }


    y = (latitude % gap) * (1 / gap)
    d4 = y
    d3 = 1 - y

    result_vector_x = d3 * x2_vector_x + d4 * x1_vector_x
    result_vector_y = d3 * x2_vector_y + d4 * x1_vector_y
    result_vector_scale = Math.sqrt(result_vector_x * result_vector_x + result_vector_y * result_vector_y)

    result_vector = [result_vector_x, result_vector_y, result_vector_scale]
    return result_vector                //보간값 리턴
}

function init() {
    cn.width = window.innerWidth
    cn.height = window.innerHeight
    cnx = cn.width - 1
    cny = cn.height - 1
    c.linewidth = "1";
    windCount = document.getElementById("range1").value
    showSpeed = document.getElementById("range2").value

    speed7.color = speed7.picker.value
    speed7.dom.style.backgroundColor = speed7.color

    speed5.color = speed5.picker.value
    speed5.dom.style.backgroundColor = speed5.color

    speed3.color = speed3.picker.value
    speed3.dom.style.backgroundColor = speed3.color

    speed1.color = speed1.picker.value
    speed1.dom.style.backgroundColor = speed1.color

    speed0.color = speed0.picker.value
    speed0.dom.style.backgroundColor = speed0.color

}

// 위.경도 그리드값 읽어오기
function readGrid() {
    debugger;
    var count = 0;
    for (i = 0; i < ((latgap * 10) / (gap * 10)) + 1; i++) {
        grid[i] = []
        for (j = 0; j < ((lnggap * 10) / (gap * 10)) + 1; j++) {
            grid[i][j] = []
            grid[i][j][0] = gridData[count++]
            grid[i][j][1] = gridData[count++]
            grid[i][j][2] = count / 2
        }
    }
    alert("준비가 완료되었습니다.")
}

//min, max 랜덤값 리턴
function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}

// 애니메이션 생성
function anim() {
    currentFrame++
    animationId = requestAnimationFrame(anim)
    c.fillStyle = "rgba(255, 255, 255, 0.2)"
    c.fillRect(0, 0, cn.width, cn.height);
    a.forEach(function (e, i) {
        e.windMove();
    });
}

//에니메이션 정지
function stopAnim() {
    cancelAnimationFrame(animationId)
}

var windCountDiv = document.getElementById('windCount');
var gauge = document.getElementById('range1')
windCountDiv.innerHTML = gauge.value

var showSpeedDiv = document.getElementById("showSpeed");
var gauge2 = document.getElementById("range2");
showSpeedDiv.innerHTML = gauge2.value

gauge.oninput = function () {
    windCountDiv.innerHTML = this.value
    windCount = this.value
    build()
}


gauge2.oninput = function () {
    showSpeedDiv.innerHTML = this.value
    showSpeed = this.value
    build()
}

document.getElementById('playWind').addEventListener('click', toggleWindLayer)

function toggleWindLayer() {
    if (showWind) {
        a = []
        stopAnim()
        init()
        showWind = !showWind
    } else {
        build()
        anim()
        showWind = !showWind
    }
}

speed7.picker.addEventListener("input", e => {
    speed7.color = e.target.value
    speed7.dom.style.backgroundColor = speed7.color
}, false)

speed5.picker.addEventListener("input", e => {
    speed5.color = e.target.value
    speed5.dom.style.backgroundColor = speed5.color

}, false)

speed3.picker.addEventListener("input", e => {
    speed3.color = e.target.value
    speed3.dom.style.backgroundColor = speed3.color
}, false)

speed1.picker.addEventListener("input", e => {
    speed1.color = e.target.value
    speed1.dom.style.backgroundColor = speed1.color
}, false)

speed0.picker.addEventListener("input", e => {
    speed0.color = e.target.value
    speed0.dom.style.backgroundColor = speed0.color
}, false)


// 애니메이션, 기타 --------------------------------------------------------------------------- END

//canvas ================================================================================== END


//kakao map =============================================================================== START

// 카카오맵 변수 선언 ------------------------------------------------------------------------- START

var container = document.getElementById('map');                 //지도를 그릴 element
var options = {
    center: new kakao.maps.LatLng(37.151198243701934, 128.22723681773422),
    level: 12
};                                                              //지도의 설정 정보

var map = new kakao.maps.Map(container, options);               // container element에 맵 객체 생성

var mapProjection = map.getProjection()
var point;

// 카카오맵 변수 선언 -------------------------------------------------------------------- END

// 카카오맵 이벤트 등록 ------------------------------------------------------------------- START

container.addEventListener('click', e => {
    point = new kakao.maps.Point(e.pageX, e.pageY)
    console.log(point, mapProjection.coordsFromContainerPoint(point))
    var windSpeed = document.getElementById('windSpeed')
    vector = getVector(mapProjection.coordsFromContainerPoint(point).Ma, mapProjection.coordsFromContainerPoint(point).La)
    windSpeed.innerHTML =
        `${mapProjection.coordsFromContainerPoint(point).Ma.toFixed(3)}, ${mapProjection.coordsFromContainerPoint(point).La.toFixed(3)}, 
    vector : ${vector[0].toFixed(3)}, ${vector[1].toFixed(3)} scale: ${vector[2].toFixed(3)}m/s zoomLevel: ${map.getLevel()}`

})